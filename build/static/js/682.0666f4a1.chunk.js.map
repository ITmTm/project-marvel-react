{"version":3,"file":"static/js/682.0666f4a1.chunk.js","mappings":"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","sources":["components/appBanner/AppBanner.js","components/errorMessage/ErrorMessage.js","components/comicsList/ComicsList.js","components/pages/ComicsPage.js","hooks/http.hook.js","services/MarvelService.js","components/skeleton/Skeleton.js","utils/setContent.js"],"sourcesContent":["import './appBanner.scss';\nimport avengers from '../../resources/img/Avengers.png';\nimport avengersLogo from '../../resources/img/Avengers_logo.png';\n\nconst AppBanner = () => {\n    return (\n        <div className=\"app__banner\">\n            <img src={avengers} alt=\"Avengers\"/>\n            <div className=\"app__banner-text\">\n                New comics every week!<br/>\n                Stay tuned!\n            </div>\n            <img src={avengersLogo} alt=\"Avengers logo\"/>\n        </div>\n    )\n}\n\nexport default AppBanner;","import img from './error.gif';\r\nconst ErrorMessage = () => {\r\n\treturn (\r\n\t\t<img style={{display: 'block', width: '450px', height: '250px', objectFit: 'contain', margin: '0 auto'}} src={img} alt='Error' />\r\n\t)\r\n}\r\n\r\nexport default ErrorMessage;","import {useState, useEffect} from \"react\";\nimport {Link} from \"react-router-dom\";\n\nimport useMarvelService from \"../../services/MarvelService\";\nimport Spinner from \"../spinner/Spinner\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\n\nimport './comicsList.scss';\nimport SetContent from \"../../utils/setContent\";\n\n\nconst setContent = (process, Component, newItemLoading) => {\n\tswitch (process) {\n\t\tcase 'waiting':\n\t\t\treturn <Spinner />;\n\t\t\tbreak;\n\t\tcase 'loading':\n\t\t\treturn newItemLoading ? <Component /> : <Spinner />;\n\t\t\tbreak;\n\t\tcase 'confirmed':\n\t\t\treturn <Component />;\n\t\t\tbreak;\n\t\tcase 'error':\n\t\t\treturn <ErrorMessage />;\n\t\t\tbreak;\n\n\t\tdefault:\n\t\t\tthrow new Error('Unexpected process state');\n\t}\n}\n\nconst ComicsList = () => {\n\n\n    const [comicsList, setComicsList] = useState([]);\n    const [newItemLoading, setNewItemLoading] = useState(false);\n    const [offset, setOffset] = useState(0);\n    const [comicsEnded, setComicsEnded] = useState(false);\n\n    const {loading, error, getAllComics, process, setProcess} = useMarvelService();\n\n    useEffect(() => {\n        onRequest(offset, true);\n    }, [])\n\n    const onRequest = (offset, initial) => {\n        initial ? setNewItemLoading(false) : setNewItemLoading(true);\n        getAllComics(offset)\n            .then(onComicsListLoaded)\n\t\t\t.then(() => setProcess('confirmed'))\n    }\n\n    const onComicsListLoaded = (newComicsList) => {\n        let ended = false;\n        if (newComicsList.length < 8) {\n            ended = true;\n        }\n\n        setComicsList([...comicsList, ...newComicsList]);\n        setNewItemLoading(false);\n        setOffset(offset + 8);\n        setComicsEnded(ended);\n    }\n\n    function renderItems(arr) {\n        const items = arr.map((item, i) => {\n            return (\n                <li className=\"comics__item\" key={i}>\n                    <Link to={`/comics/${item.id}`}>\n                        <img src={item.thumbnail} alt={item.title} className=\"comics__item-img\"/>\n                        <div className=\"comics__item-name\">{item.title}</div>\n                        <div className=\"comics__item-price\">{item.price}</div>\n                    </Link>\n                </li>\n            )\n        })\n\n        return (\n            <ul className=\"comics__grid\">\n                {items}\n            </ul>\n        )\n    }\n\n    return (\n        <div className=\"comics__list\">\n\t\t\t{SetContent(process, () => renderItems(comicsList), newItemLoading)}\n\n            <button\n                disabled={newItemLoading}\n                style={{'display': comicsEnded ? 'none' : 'block'}}\n                className=\"button button__main button__long\"\n                onClick={() => onRequest(offset)}\n            >\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n}\n\nexport default ComicsList;","import { Helmet } from \"react-helmet\";\r\n\r\nimport AppBanner from \"../appBanner/AppBanner\";\r\nimport ComicsList from \"../comicsList/ComicsList\";\r\n\r\nconst ComicsPage = () => {\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<Helmet>\r\n\t\t\t\t<meta\r\n\t\t\t\t\tname=\"description\"\r\n\t\t\t\t\tcontent=\"Page with list of our comics\"\r\n\t\t\t\t/>\r\n\t\t\t\t<title>Comics page</title>\r\n\t\t\t</Helmet>\r\n\t\t\t<AppBanner/>\r\n\t\t\t<ComicsList/>\r\n\t\t</>\r\n\t)\r\n}\r\n\r\nexport default ComicsPage;","import  {useState, useCallback} from \"react\";\r\n\r\nexport const useHttp = () => {\r\n\tconst [process, setProcess] = useState('waiting');\r\n\r\n\tconst request = useCallback(async (url, method = \"GET\", body = null, headers = {'Content-Type': 'application/json'}) => {\r\n\r\n\t\tsetProcess('loading');\r\n\r\n\t\ttry {\r\n\t\t\tconst response = await fetch(url, {method, body, headers});\r\n\r\n\t\t\tif (!response.ok) {\r\n\t\t\t\tthrow new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n\t\t\t}\r\n\r\n\t\t\tconst data = await response.json();\r\n\r\n\t\t\treturn data;\r\n\r\n\t\t} catch (e) {\r\n\t\t\tsetProcess('error');\r\n\t\t\tthrow e;\r\n\t\t}\r\n\t}, [])\r\n\r\n\tconst clearError = useCallback(() => {\r\n\t\tsetProcess('loading');\r\n\t}, []);\r\n\r\n\treturn {request, clearError, process, setProcess};\r\n}","import {useHttp} from \"../hooks/http.hook\";\r\n\r\nconst useMarvelService = () => {\r\n\tconst {request, clearError, process, setProcess} = useHttp();\r\n\r\n\tconst _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n\tconst _apiKey = 'apikey=81c9ec44faf041042c369770623c2248';\r\n\tconst _baseOffset = 210;\r\n\r\n\r\n\tconst getAllCharacters = async (offset = _baseOffset) => {\r\n\t\tconst res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n\t\treturn res.data.results.map(_transformCharacter);\r\n\t}\r\n\r\n\t// Отдельный метод для поиска по имени\r\n\tconst getCharacterByName = async (name) => {\r\n\t\tconst res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n\t\treturn res.data.results.map(_transformCharacter);\r\n\t}\r\n\r\n\tconst getCharacter = async (id) => {\r\n\t\tconst res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n\t\treturn _transformCharacter(res.data.results[0]);\r\n\t}\r\n\r\n\tconst getAllComics = async (offset = 0) => {\r\n\t\tconst res = await request(\r\n\t\t\t`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`\r\n\t\t)\r\n\r\n\t\treturn res.data.results.map(_transformComics);\r\n\t}\r\n\r\n\tconst getComic = async (id) => {\r\n\t\tconst res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n\t\treturn _transformComics(res.data.results[0]);\r\n\t}\r\n\r\n\tconst _transformCharacter = (char) => {\r\n\t\treturn {\r\n\t\t\tid: char.id,\r\n\t\t\tname: char.name,\r\n\t\t\tdescription: char.description\r\n\t\t\t\t? `${char.description.slice(0, 210)}...`\r\n\t\t\t\t: 'There is no description for this character',\r\n\t\t\tthumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n\t\t\thomepage: char.urls[0].url,\r\n\t\t\twiki: char.urls[1].url,\r\n\t\t\tcomics: char.comics.items\r\n\t\t}\r\n\t}\r\n\r\n\tconst _transformComics = (comics) => {\r\n\t\treturn {\r\n\t\t\tid: comics.id,\r\n\t\t\ttitle: comics.title,\r\n\t\t\tdescription: comics.description || \"There is no description\",\r\n\t\t\tpageCount: comics.pageCount\r\n\t\t\t\t? `${comics.pageCount} p.`\r\n\t\t\t\t: \"No information about the number of pages\",\r\n\t\t\tthumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\r\n\t\t\tlanguage: comics.textObjects[0]?.language || \"en-us\",\r\n\t\t\tprice: comics.prices[0].price\r\n\t\t\t\t? `${comics.prices[0].price}$`\r\n\t\t\t\t: \"not available\",\r\n\t\t}\r\n\t}\r\n\r\n\treturn {\r\n\t\tclearError,\r\n\t\tprocess,\r\n\t\tsetProcess,\r\n\t\tgetAllCharacters,\r\n\t\tgetCharacterByName,\r\n\t\tgetCharacter,\r\n\t\tgetAllComics,\r\n\t\tgetComic\r\n\t};\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\t\t\t// Неизмененный классовый компонент\r\n// class MarvelService {\r\n// \t_apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n// \t_apiKey = 'apikey=81c9ec44faf041042c369770623c2248';\r\n// \t_baseOffset = 210;\r\n//\r\n// \tgetResource = async (url) => {\r\n// \t\tlet res = await fetch(url);\r\n//\r\n// \t\tif (!res.ok) {\r\n// \t\t\tthrow new Error(`Could not fetch ${url}, status: ${res.status}`);\r\n// \t\t}\r\n//\r\n// \t\treturn await res.json();\r\n// \t}\r\n//\r\n// \tgetAllCharacters = async (offset = this._baseOffset) => {\r\n// \t\tconst res = await this.getResource(`${this._apiBase}characters?limit=9&offset=${offset}&${this._apiKey}`);\r\n// \t\treturn res.data.results.map(this._transformCharacter);\r\n// \t}\r\n//\r\n// \tgetCharacter = async (id) => {\r\n// \t\tconst res = await this.getResource(`${this._apiBase}characters/${id}?${this._apiKey}`);\r\n// \t\treturn this._transformCharacter(res.data.results[0]);\r\n// \t}\r\n//\r\n// \t_transformCharacter = (char) => {\r\n// \t\treturn {\r\n// \t\t\tid: char.id,\r\n// \t\t\tname: char.name,\r\n// \t\t\tdescription: char.description ? `${char.description.slice(0, 210)}...` : 'There is no description for this character',\r\n// \t\t\tthumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n// \t\t\thomepage: char.urls[0].url,\r\n// \t\t\twiki: char.urls[1].url,\r\n// \t\t\tcomics: char.comics.items\r\n// \t\t}\r\n// \t}\r\n// }\r\n\r\nexport default useMarvelService;","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import Spinner from \"../components/spinner/Spinner\";\r\nimport ErrorMessage from \"../components/errorMessage/ErrorMessage\";\r\nimport Skeleton from \"../components/skeleton/Skeleton\";\r\n\r\nconst setContent = (process, Component, data) => {\r\n\tswitch (process) {\r\n\t\tcase 'waiting':\r\n\t\t\treturn <Skeleton />;\r\n\t\tcase 'loading':\r\n\t\t\treturn <Spinner />;\r\n\t\tcase 'confirmed':\r\n\t\t\treturn <Component data={data} />;\r\n\t\tcase 'error':\r\n\t\t\treturn <ErrorMessage />;\r\n\r\n\t\tdefault:\r\n\t\t\tthrow new Error('Unexpected process state');\r\n\t}\r\n}\r\n\r\nexport default setContent;"],"names":["AppBanner","_jsxs","className","children","_jsx","src","avengers","alt","avengersLogo","ErrorMessage","style","display","width","height","objectFit","margin","img","ComicsList","comicsList","setComicsList","useState","newItemLoading","setNewItemLoading","offset","setOffset","comicsEnded","setComicsEnded","loading","error","getAllComics","process","setProcess","useMarvelService","useEffect","onRequest","initial","then","onComicsListLoaded","newComicsList","ended","length","SetContent","arr","items","map","item","i","Link","to","concat","id","thumbnail","title","price","renderItems","disabled","onClick","ComicsPage","_Fragment","Helmet","name","content","request","clearError","useHttp","useCallback","async","url","method","arguments","undefined","body","headers","response","fetch","ok","Error","status","json","e","_apiBase","_apiKey","_transformCharacter","char","description","slice","path","extension","homepage","urls","wiki","comics","_transformComics","_comics$textObjects$","pageCount","language","textObjects","prices","getAllCharacters","data","results","getCharacterByName","getCharacter","res","getComic","Skeleton","setContent","Component","Spinner"],"sourceRoot":""}