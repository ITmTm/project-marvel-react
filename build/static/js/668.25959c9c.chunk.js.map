{"version":3,"file":"static/js/668.25959c9c.chunk.js","mappings":"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","sources":["components/errorMessage/ErrorMessage.js","components/randomChar/RandomChar.js","../node_modules/react-transition-group/esm/utils/ChildMapping.js","../node_modules/react-transition-group/esm/TransitionGroup.js","../node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js","components/charList/CharList.js","components/skeleton/Skeleton.js","components/charInfo/CharInfo.js","components/errorBoundary/ErrorBoundary.js","components/pages/MainPage.js","hooks/http.hook.js","services/MarvelService.js"],"sourcesContent":["import img from './error.gif';\r\nconst ErrorMessage = () => {\r\n\treturn (\r\n\t\t<img style={{display: 'block', width: '450px', height: '250px', objectFit: 'contain', margin: '0 auto'}} src={img} alt='Error' />\r\n\t)\r\n}\r\n\r\nexport default ErrorMessage;","// import {Component} from \"react\";\nimport {useState, useEffect} from \"react\";\nimport Spinner from \"../spinner/Spinner\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\n\nimport useMarvelService from \"../../services/MarvelService\";\n\nimport './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png';\n\n\n                        // Функциональный компонент hook(i)\nconst RandomChar = () => {\n\n    const [char, setChar] = useState(null);\n    const {loading, error, getCharacter, clearError} = useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n        const timerId = setInterval(updateChar, 60000);\n\n        return () => {\n            clearInterval(timerId);\n        }\n        // eslint-disable-next-line\n    }, []);\n\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n\n    const updateChar = () => {\n        clearError();\n        const id = Math.floor(Math.random() * (1011334 - 1011136) + 1011136);\n        getCharacter(id)\n            .then(onCharLoaded);\n\n    }\n\n    const errorMessage = error ? <ErrorMessage /> : null;\n    const spinner = loading ? <Spinner /> : null;\n    const content = !(loading || error || !char) ? <View char={char} /> : null;\n\n    return (\n        <div className=\"randomchar\">\n            {errorMessage}\n            {spinner}\n            {content}\n            <div className=\"randomchar__static\">\n                <p className=\"randomchar__title\">\n                    Random character for today!<br/>\n                    Do you want to get to know him better?\n                </p>\n                <p className=\"randomchar__title\">\n                    Or choose another one\n                </p>\n                <button\n                    className=\"button button__main\"\n                    onClick={updateChar}\n                >\n                    <div className=\"inner\">try it</div>\n                </button>\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\n            </div>\n        </div>\n    )\n}\n\nconst View = ({char}) => {\n    const {name, description, thumbnail, homepage, wiki} = char;\n    let imgStyle = {'objectFit' : 'cover'};\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = {'objectFit' : 'contain'}\n    }\n\n    return (\n        <div className=\"randomchar__block\">\n            <img\n                src={thumbnail}\n                alt=\"Random character\"\n                className=\"randomchar__img\"\n                style={imgStyle}\n            />\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{name}</p>\n                <p className=\"randomchar__descr\">{description}</p>\n                <div className=\"randomchar__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n    )\n}\n\n\n\n\n\n\n\n// class RandomChar extends Component {\n//     state = {\n//         char: {},\n//         loading: true,\n//         error: false\n//     }\n//\n//     marvelService = new MarvelService();\n//\n//     componentDidMount() {\n//         this.updateChar();\n//         // this.timerId = setInterval(this.updateChar, 3000);\n//     }\n//\n//     componentWillUnmount() {\n//         clearInterval(this.timerId);\n//     }\n//\n//     onCharLoaded = (char) => {\n//         this.setState({\n//             char,\n//             loading: false\n//         })\n//     }\n//\n//     onCharLoading = () => {\n//         this.setState({\n//             loading: true\n//         })\n//     }\n//\n//     onError = () => {\n//         this.setState({\n//             loading: false,\n//             error: true\n//         })\n//     }\n//\n//     updateChar = () => {\n//         const id = Math.floor(Math.random() * (1011334 - 1011136) + 1011136);\n//         this.onCharLoading();\n//         this.marvelService\n//             .getCharacter(id)\n//             .then(this.onCharLoaded)\n//             .catch(this.onError);\n//     }\n//\n//     render() {\n//         const {char, loading, error} = this.state;\n//         const errorMessage = error ? <ErrorMessage /> : null;\n//         const spinner = loading ? <Spinner /> : null;\n//         const content = !(loading || error) ? <View char={char} /> : null;\n//\n//         return (\n//             <div className=\"randomchar\">\n//                 {errorMessage}\n//                 {spinner}\n//                 {content}\n//                 <div className=\"randomchar__static\">\n//                     <p className=\"randomchar__title\">\n//                         Random character for today!<br/>\n//                         Do you want to get to know him better?\n//                     </p>\n//                     <p className=\"randomchar__title\">\n//                         Or choose another one\n//                     </p>\n//                     <button\n//                         className=\"button button__main\"\n//                         onClick={this.updateChar}\n//                     >\n//                         <div className=\"inner\">try it</div>\n//                     </button>\n//                     <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\n//                 </div>\n//             </div>\n//         )\n//     }\n// }\n//\n// const View = ({char}) => {\n//     const {name, description, thumbnail, homepage, wiki} = char;\n//     let imgStyle = {'objectFit' : 'cover'};\n//     if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n//         imgStyle = {'objectFit' : 'contain'}\n//     }\n//\n//     return (\n//         <div className=\"randomchar__block\">\n//             <img\n//                 src={thumbnail}\n//                 alt=\"Random character\"\n//                 className=\"randomchar__img\"\n//                 style={imgStyle}\n//             />\n//             <div className=\"randomchar__info\">\n//                 <p className=\"randomchar__name\">{name}</p>\n//                 <p className=\"randomchar__descr\">{description}</p>\n//                 <div className=\"randomchar__btns\">\n//                     <a href={homepage} className=\"button button__main\">\n//                         <div className=\"inner\">homepage</div>\n//                     </a>\n//                     <a href={wiki} className=\"button button__secondary\">\n//                         <div className=\"inner\">Wiki</div>\n//                     </a>\n//                 </div>\n//             </div>\n//         </div>\n//     )\n// }\n\nexport default RandomChar;","import { Children, cloneElement, isValidElement } from 'react';\n/**\n * Given `this.props.children`, return an object mapping key to child.\n *\n * @param {*} children `this.props.children`\n * @return {object} Mapping of key to child\n */\n\nexport function getChildMapping(children, mapFn) {\n  var mapper = function mapper(child) {\n    return mapFn && isValidElement(child) ? mapFn(child) : child;\n  };\n\n  var result = Object.create(null);\n  if (children) Children.map(children, function (c) {\n    return c;\n  }).forEach(function (child) {\n    // run the map function here instead so that the key is the computed one\n    result[child.key] = mapper(child);\n  });\n  return result;\n}\n/**\n * When you're adding or removing children some may be added or removed in the\n * same render pass. We want to show *both* since we want to simultaneously\n * animate elements in and out. This function takes a previous set of keys\n * and a new set of keys and merges them with its best guess of the correct\n * ordering. In the future we may expose some of the utilities in\n * ReactMultiChild to make this easy, but for now React itself does not\n * directly have this concept of the union of prevChildren and nextChildren\n * so we implement it here.\n *\n * @param {object} prev prev children as returned from\n * `ReactTransitionChildMapping.getChildMapping()`.\n * @param {object} next next children as returned from\n * `ReactTransitionChildMapping.getChildMapping()`.\n * @return {object} a key set that contains all keys in `prev` and all keys\n * in `next` in a reasonable order.\n */\n\nexport function mergeChildMappings(prev, next) {\n  prev = prev || {};\n  next = next || {};\n\n  function getValueForKey(key) {\n    return key in next ? next[key] : prev[key];\n  } // For each key of `next`, the list of keys to insert before that key in\n  // the combined list\n\n\n  var nextKeysPending = Object.create(null);\n  var pendingKeys = [];\n\n  for (var prevKey in prev) {\n    if (prevKey in next) {\n      if (pendingKeys.length) {\n        nextKeysPending[prevKey] = pendingKeys;\n        pendingKeys = [];\n      }\n    } else {\n      pendingKeys.push(prevKey);\n    }\n  }\n\n  var i;\n  var childMapping = {};\n\n  for (var nextKey in next) {\n    if (nextKeysPending[nextKey]) {\n      for (i = 0; i < nextKeysPending[nextKey].length; i++) {\n        var pendingNextKey = nextKeysPending[nextKey][i];\n        childMapping[nextKeysPending[nextKey][i]] = getValueForKey(pendingNextKey);\n      }\n    }\n\n    childMapping[nextKey] = getValueForKey(nextKey);\n  } // Finally, add the keys which didn't appear before any key in `next`\n\n\n  for (i = 0; i < pendingKeys.length; i++) {\n    childMapping[pendingKeys[i]] = getValueForKey(pendingKeys[i]);\n  }\n\n  return childMapping;\n}\n\nfunction getProp(child, prop, props) {\n  return props[prop] != null ? props[prop] : child.props[prop];\n}\n\nexport function getInitialChildMapping(props, onExited) {\n  return getChildMapping(props.children, function (child) {\n    return cloneElement(child, {\n      onExited: onExited.bind(null, child),\n      in: true,\n      appear: getProp(child, 'appear', props),\n      enter: getProp(child, 'enter', props),\n      exit: getProp(child, 'exit', props)\n    });\n  });\n}\nexport function getNextChildMapping(nextProps, prevChildMapping, onExited) {\n  var nextChildMapping = getChildMapping(nextProps.children);\n  var children = mergeChildMappings(prevChildMapping, nextChildMapping);\n  Object.keys(children).forEach(function (key) {\n    var child = children[key];\n    if (!isValidElement(child)) return;\n    var hasPrev = (key in prevChildMapping);\n    var hasNext = (key in nextChildMapping);\n    var prevChild = prevChildMapping[key];\n    var isLeaving = isValidElement(prevChild) && !prevChild.props.in; // item is new (entering)\n\n    if (hasNext && (!hasPrev || isLeaving)) {\n      // console.log('entering', key)\n      children[key] = cloneElement(child, {\n        onExited: onExited.bind(null, child),\n        in: true,\n        exit: getProp(child, 'exit', nextProps),\n        enter: getProp(child, 'enter', nextProps)\n      });\n    } else if (!hasNext && hasPrev && !isLeaving) {\n      // item is old (exiting)\n      // console.log('leaving', key)\n      children[key] = cloneElement(child, {\n        in: false\n      });\n    } else if (hasNext && hasPrev && isValidElement(prevChild)) {\n      // item hasn't changed transition states\n      // copy over the last transition props;\n      // console.log('unchanged', key)\n      children[key] = cloneElement(child, {\n        onExited: onExited.bind(null, child),\n        in: prevChild.props.in,\n        exit: getProp(child, 'exit', nextProps),\n        enter: getProp(child, 'enter', nextProps)\n      });\n    }\n  });\n  return children;\n}","import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport TransitionGroupContext from './TransitionGroupContext';\nimport { getChildMapping, getInitialChildMapping, getNextChildMapping } from './utils/ChildMapping';\n\nvar values = Object.values || function (obj) {\n  return Object.keys(obj).map(function (k) {\n    return obj[k];\n  });\n};\n\nvar defaultProps = {\n  component: 'div',\n  childFactory: function childFactory(child) {\n    return child;\n  }\n};\n/**\n * The `<TransitionGroup>` component manages a set of transition components\n * (`<Transition>` and `<CSSTransition>`) in a list. Like with the transition\n * components, `<TransitionGroup>` is a state machine for managing the mounting\n * and unmounting of components over time.\n *\n * Consider the example below. As items are removed or added to the TodoList the\n * `in` prop is toggled automatically by the `<TransitionGroup>`.\n *\n * Note that `<TransitionGroup>`  does not define any animation behavior!\n * Exactly _how_ a list item animates is up to the individual transition\n * component. This means you can mix and match animations across different list\n * items.\n */\n\nvar TransitionGroup = /*#__PURE__*/function (_React$Component) {\n  _inheritsLoose(TransitionGroup, _React$Component);\n\n  function TransitionGroup(props, context) {\n    var _this;\n\n    _this = _React$Component.call(this, props, context) || this;\n\n    var handleExited = _this.handleExited.bind(_assertThisInitialized(_this)); // Initial children should all be entering, dependent on appear\n\n\n    _this.state = {\n      contextValue: {\n        isMounting: true\n      },\n      handleExited: handleExited,\n      firstRender: true\n    };\n    return _this;\n  }\n\n  var _proto = TransitionGroup.prototype;\n\n  _proto.componentDidMount = function componentDidMount() {\n    this.mounted = true;\n    this.setState({\n      contextValue: {\n        isMounting: false\n      }\n    });\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    this.mounted = false;\n  };\n\n  TransitionGroup.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, _ref) {\n    var prevChildMapping = _ref.children,\n        handleExited = _ref.handleExited,\n        firstRender = _ref.firstRender;\n    return {\n      children: firstRender ? getInitialChildMapping(nextProps, handleExited) : getNextChildMapping(nextProps, prevChildMapping, handleExited),\n      firstRender: false\n    };\n  } // node is `undefined` when user provided `nodeRef` prop\n  ;\n\n  _proto.handleExited = function handleExited(child, node) {\n    var currentChildMapping = getChildMapping(this.props.children);\n    if (child.key in currentChildMapping) return;\n\n    if (child.props.onExited) {\n      child.props.onExited(node);\n    }\n\n    if (this.mounted) {\n      this.setState(function (state) {\n        var children = _extends({}, state.children);\n\n        delete children[child.key];\n        return {\n          children: children\n        };\n      });\n    }\n  };\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        Component = _this$props.component,\n        childFactory = _this$props.childFactory,\n        props = _objectWithoutPropertiesLoose(_this$props, [\"component\", \"childFactory\"]);\n\n    var contextValue = this.state.contextValue;\n    var children = values(this.state.children).map(childFactory);\n    delete props.appear;\n    delete props.enter;\n    delete props.exit;\n\n    if (Component === null) {\n      return /*#__PURE__*/React.createElement(TransitionGroupContext.Provider, {\n        value: contextValue\n      }, children);\n    }\n\n    return /*#__PURE__*/React.createElement(TransitionGroupContext.Provider, {\n      value: contextValue\n    }, /*#__PURE__*/React.createElement(Component, props, children));\n  };\n\n  return TransitionGroup;\n}(React.Component);\n\nTransitionGroup.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /**\n   * `<TransitionGroup>` renders a `<div>` by default. You can change this\n   * behavior by providing a `component` prop.\n   * If you use React v16+ and would like to avoid a wrapping `<div>` element\n   * you can pass in `component={null}`. This is useful if the wrapping div\n   * borks your css styles.\n   */\n  component: PropTypes.any,\n\n  /**\n   * A set of `<Transition>` components, that are toggled `in` and out as they\n   * leave. the `<TransitionGroup>` will inject specific transition props, so\n   * remember to spread them through if you are wrapping the `<Transition>` as\n   * with our `<Fade>` example.\n   *\n   * While this component is meant for multiple `Transition` or `CSSTransition`\n   * children, sometimes you may want to have a single transition child with\n   * content that you want to be transitioned out and in when you change it\n   * (e.g. routes, images etc.) In that case you can change the `key` prop of\n   * the transition child as you change its content, this will cause\n   * `TransitionGroup` to transition the child out and back in.\n   */\n  children: PropTypes.node,\n\n  /**\n   * A convenience prop that enables or disables appear animations\n   * for all children. Note that specifying this will override any defaults set\n   * on individual children Transitions.\n   */\n  appear: PropTypes.bool,\n\n  /**\n   * A convenience prop that enables or disables enter animations\n   * for all children. Note that specifying this will override any defaults set\n   * on individual children Transitions.\n   */\n  enter: PropTypes.bool,\n\n  /**\n   * A convenience prop that enables or disables exit animations\n   * for all children. Note that specifying this will override any defaults set\n   * on individual children Transitions.\n   */\n  exit: PropTypes.bool,\n\n  /**\n   * You may need to apply reactive updates to a child as it is exiting.\n   * This is generally done by using `cloneElement` however in the case of an exiting\n   * child the element has already been removed and not accessible to the consumer.\n   *\n   * If you do need to update a child as it leaves you can provide a `childFactory`\n   * to wrap every child, even the ones that are leaving.\n   *\n   * @type Function(child: ReactElement) -> ReactElement\n   */\n  childFactory: PropTypes.func\n} : {};\nTransitionGroup.defaultProps = defaultProps;\nexport default TransitionGroup;","export default function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return self;\n}","// import {Component} from \"react\";\nimport {useState, useEffect, useRef} from \"react\";\nimport PropTypes from \"prop-types\";\nimport {CSSTransition, TransitionGroup} from \"react-transition-group\";\n\nimport useMarvelService from \"../../services/MarvelService\";\nimport Spinner from \"../spinner/Spinner\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\n\nimport './charList.scss';\n\n\n                                // Функциональный компонент hook(i)\n\nconst CharList = (props) => {\n\n    const [charList, setCharList] = useState([]);\n    const [newItemLoading, setNewItemLoading] = useState(false);\n    const [offset, setOffset] = useState(210);\n    const [charEnded, setCharEnded] = useState(false);\n\n\n    const {loading, error, getAllCharacters} = useMarvelService();\n\n    useEffect(() => {\n        onRequest(offset, true);\n        // eslint-disable-next-line\n    }, [])\n\n\n    const onRequest = (offset, initial) => {\n        initial ? setNewItemLoading(false) : setNewItemLoading(true);\n        getAllCharacters(offset)\n            .then(onCharListLoaded);\n    }\n\n\n    const onCharListLoaded = (newCharList) => {\n        let ended = false;\n        if (newCharList.length < 9) {\n            ended = true;\n        }\n\n\n        setCharList(charList => [...charList, ...newCharList]);\n        setNewItemLoading(setNewItemLoading => false);\n        setOffset(offset => offset + 9);\n        setCharEnded(charEnded => ended);\n    }\n\n\n    const itemRefs = useRef([]);\n\n\n    const focusOnItem = (id) => {\n        itemRefs.current.forEach(item => item.classList.remove('char__item_selected'));\n        itemRefs.current[id].classList.add('char__item_selected');\n        itemRefs.current[id].focus();\n    }\n\n    // Оптимизация метода, чтобы не помещать такую большую конструкцию в render\n    function renderItems(arr) {\n        const items = arr.map((item, i) => {\n            let imgStyle = {'objectFit' : 'cover'};\n            if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n                imgStyle = {'objectFit' : 'unset'}\n            }\n\n            return (\n                <CSSTransition key={item.id} timeout={500} classNames='char__item'>\n                    <li\n                        className=\"char__item\"\n                        tabIndex={0}\n                        ref={el => itemRefs.current[i] = el}\n                        key={item.id}\n                        onClick={() => {\n                            props.onCharSelected(item.id);\n                            focusOnItem(i);\n                        }}\n                        onKeyDown={(e) => {\n                            if (e.key === '' || e.key === 'Enter') {\n                                props.onCharSelected(item.id);\n                                focusOnItem(i)\n                            }\n                        }}\n                    >\n                        <img src={item.thumbnail} alt={item.name} style={imgStyle}/>\n                        <div className=\"char__name\">{item.name}</div>\n                    </li>\n                </CSSTransition>\n            )\n        });\n\n        // Эта конструкция вынесена для центровки спиннера/ошибкиж\n        return (\n            <ul className=\"char__grid\">\n                <TransitionGroup component={null}>\n                    {items}\n                </TransitionGroup>\n            </ul>\n        )\n    }\n\n\n    const items = renderItems(charList);\n\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading && !newItemLoading ? <Spinner/> : null;\n\n    return (\n        <div className=\"char__list\">\n            {errorMessage}\n            {spinner}\n            {items}\n            <button\n                className=\"button button__main button__long\"\n                disabled={newItemLoading}\n                style={{'display': charEnded ? 'none' : 'block'}}\n                onClick={() => onRequest(offset)}\n            >\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n}\n\nCharList.propTypes = {\n    onCharSelected: PropTypes.func.isRequired\n}\n\n\n\n// class CharList extends Component {\n//\n//     state = {\n//         charList: [],\n//         loading: true,\n//         error: false,\n//         newItemLoading: false,\n//         offset: 210,\n//         charEnded: false\n//     }\n//\n//     marvelService = new MarvelService();\n//\n//     componentDidMount() {\n//         this.onRequest();\n//     }\n//\n//     onRequest = (offset) => {\n//         this.onCharListLoading();\n//         this.marvelService.getAllCharacters(offset)\n//             .then(this.onCharListLoaded)\n//             .catch(this.onError)\n//     }\n//\n//     onCharListLoading = () => {\n//         this.setState({\n//             newItemLoading: true\n//         })\n//     }\n//\n//     onCharListLoaded = (newCharList) => {\n//         let ended = false;\n//         if (newCharList.length < 9) {\n//             ended = true;\n//         }\n//\n//\n//         this.setState(({offset, charList}) => ({\n//             charList: [...charList, ...newCharList],\n//             loading: false,\n//             newItemLoading: false,\n//             offset: offset + 9,\n//             charEnded: ended\n//         }))\n//     }\n//\n//     onError = () => {\n//         this.setState({\n//             error: true,\n//             loading: false\n//         })\n//     }\n//\n//     // Оптимизация метода, чтобы не помещать такую большую конструкцию в render\n//     renderItems(arr) {\n//         const items = arr.map((item) => {\n//             let imgStyle = {'objectFit' : 'cover'};\n//             if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n//                 imgStyle = {'objectFit' : 'unset'}\n//             }\n//\n//             return (\n//                 <li className=\"char__item\"\n//                     key={item.id}\n//                     onClick={() => this.props.onCharSelected(item.id)}\n//                 >\n//                     <img src={item.thumbnail} alt={item.name} style={imgStyle}/>\n//                     <div className=\"char__name\">{item.name}</div>\n//                 </li>\n//             )\n//         });\n//\n//         // Эта конструкция вынесена для центровки спиннера/ошибкиж\n//         return (\n//             <ul className=\"char__grid\">\n//                 {items}\n//             </ul>\n//         )\n//     }\n//\n//\n//     render() {\n//\n//         const {charList, loading, error, newItemLoading, offset, charEnded} = this.state;\n//\n//         const items = this.renderItems(charList);\n//\n//         const errorMessage = error ? <ErrorMessage /> : null;\n//         const spinner = loading ? <Spinner /> : null;\n//         const content = !(loading || error) ? items : null;\n//\n//         return (\n//             <div className=\"char__list\">\n//                 {errorMessage}\n//                 {spinner}\n//                 {content}\n//                 <button\n//                     className=\"button button__main button__long\"\n//                     disabled={newItemLoading}\n//                     style={{'display': charEnded ? 'none' : 'block'}}\n//                     onClick={() => this.onRequest(offset)}\n//                 >\n//                     <div className=\"inner\">load more</div>\n//                 </button>\n//             </div>\n//         )\n//     }\n// }\n//\n// CharList.propTypes = {\n//     onCharSelected: PropTypes.func.isRequired\n// }\n\nexport default CharList;","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","// import {Component} from \"react\";\nimport {useState, useEffect} from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport useMarvelService from \"../../services/MarvelService\";\nimport Spinner from \"../spinner/Spinner\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\nimport Skeleton from \"../skeleton/Skeleton\";\n\nimport './charInfo.scss';\n\n\n                            // Функциональный компонент hook(i)\nconst CharInfo = (props) => {\n\n    const [char, setChar] = useState(null);\n\n\n    const {loading, error, getCharacter, clearError} = useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n        // eslint-disable-next-line\n    }, [props.charId]);\n\n\n\n\n    const updateChar = () => {\n        const {charId} = props;\n        if (!charId) {\n            return;\n        }\n\n        clearError();\n        getCharacter(charId)\n            .then(onCharLoaded);\n    }\n\n\n\n    const onCharLoaded = (char) => {\n        setChar(char)\n    }\n\n\n\n    const skeleton = char || loading || error ? null : <Skeleton />;\n    const errorMessage = error ? <ErrorMessage /> : null;\n    const spinner = loading ? <Spinner /> : null;\n    const content = !(loading || error || !char) ? <View char={char} /> : null;\n\n    return (\n        <div className=\"char__info\">\n            {skeleton}\n            {errorMessage}\n            {spinner}\n            {content}\n        </div>\n    )\n}\n\nconst View = ({char}) => {\n    const {name, description, thumbnail, homepage, wiki, comics} = char;\n\n    let imgStyle = {'objectFit' : 'cover'};\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = {'objectFit' : 'contain'}\n    }\n\n    return (\n        <>\n            <div className=\"char__basics\">\n                <img\n                    src={thumbnail}\n                    alt={name}\n                    style={imgStyle}\n                />\n                <div>\n                    <div className=\"char__info-name\">{name}</div>\n                    <div className=\"char__btns\">\n                        <a href={homepage} className=\"button button__main\">\n                            <div className=\"inner\">homepage</div>\n                        </a>\n                        <a href={wiki} className=\"button button__secondary\">\n                            <div className=\"inner\">Wiki</div>\n                        </a>\n                    </div>\n                </div>\n            </div>\n            <div className=\"char__descr\">\n                {description}\n            </div>\n            <div className=\"char__comics\">Comics:</div>\n            <ul className=\"char__comics-list\">\n                {comics.length > 0 ? null : 'There is no comics with this character'}\n                {\n                    comics.map((item, i) => {\n                        // eslint-disable-next-line\n                        if (i > 9) return;\n                        return (\n                            <li key={i} className=\"char__comics-item\">\n                                {item.name}\n                            </li>\n                        )\n                    })\n                }\n            </ul>\n        </>\n    )\n}\n\nCharInfo.propTypes = {\n  charId: PropTypes.number\n}\n\n\n\n// class CharInfo extends Component {\n//\n//     state = {\n//         char: null,\n//         loading: false,\n//         error: false\n//     }\n//\n//     marvelService = new MarvelService();\n//\n//     componentDidMount() {\n//         this.updateChar();\n//     }\n//\n//     componentDidUpdate(prevProps) {\n//         if (this.props.charId !== prevProps.charId) {\n//             this.updateChar();\n//         }\n//     }\n//\n//\n//     updateChar = () => {\n//         const {charId} = this.props;\n//         if (!charId) {\n//             return;\n//         }\n//\n//         this.onCharLoading();\n//\n//         this.marvelService\n//             .getCharacter(charId)\n//             .then(this.onCharLoaded)\n//             .catch(this.onError)\n//     }\n//\n//\n//\n//     onCharLoaded = (char) => {\n//         this.setState({\n//             char,\n//             loading: false\n//         })\n//     }\n//\n//     onCharLoading = () => {\n//         this.setState({\n//             loading: true\n//         })\n//     }\n//\n//     onError = () => {\n//         this.setState({\n//             loading: false,\n//             error: true\n//         })\n//     }\n//\n//\n//     render() {\n//         const {char, loading, error} = this.state;\n//\n//         const skeleton = char || loading || error ? null : <Skeleton />;\n//         const errorMessage = error ? <ErrorMessage /> : null;\n//         const spinner = loading ? <Spinner /> : null;\n//         const content = !(loading || error || !char) ? <View char={char} /> : null;\n//\n//         return (\n//             <div className=\"char__info\">\n//                 {skeleton}\n//                 {errorMessage}\n//                 {spinner}\n//                 {content}\n//             </div>\n//         )\n//     }\n// }\n//\n// const View = ({char}) => {\n//     const {name, description, thumbnail, homepage, wiki, comics} = char;\n//\n//     let imgStyle = {'objectFit' : 'cover'};\n//     if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n//         imgStyle = {'objectFit' : 'contain'}\n//     }\n//\n//     return (\n//         <>\n//             <div className=\"char__basics\">\n//                 <img\n//                     src={thumbnail}\n//                     alt={name}\n//                     style={imgStyle}\n//                 />\n//                 <div>\n//                     <div className=\"char__info-name\">{name}</div>\n//                     <div className=\"char__btns\">\n//                         <a href={homepage} className=\"button button__main\">\n//                             <div className=\"inner\">homepage</div>\n//                         </a>\n//                         <a href={wiki} className=\"button button__secondary\">\n//                             <div className=\"inner\">Wiki</div>\n//                         </a>\n//                     </div>\n//                 </div>\n//             </div>\n//             <div className=\"char__descr\">\n//                 {description}\n//             </div>\n//             <div className=\"char__comics\">Comics:</div>\n//             <ul className=\"char__comics-list\">\n//                 {comics.length > 0 ? null : 'There is no comics with this character'}\n//                 {\n//                     comics.map((item, i) => {\n//                         // eslint-disable-next-line\n//                         if (i > 9) return;\n//                         return (\n//                             <li key={i} className=\"char__comics-item\">\n//                                 {item.name}\n//                             </li>\n//                         )\n//                     })\n//                 }\n//             </ul>\n//         </>\n//     )\n// }\n\nexport default CharInfo;","import {Component} from \"react\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nclass ErrorBoundary extends Component {\r\n\tstate = {\r\n\t\terror: false\r\n\t}\r\n\r\n\r\n\tcomponentDidCatch(error, errorInfo) {\r\n\t\tconsole.log(error, errorInfo);\r\n\t\tthis.setState({\r\n\t\t\terror: true\r\n\t\t})\r\n\t}\r\n\r\n\trender() {\r\n\t\tif (this.state.error) {\r\n\t\t\t// return <h2 style={{margin: '50% auto 0 auto', fontSize: '40px', color: 'red'}}>Something went wrong</h2>\r\n\t\t\treturn <ErrorMessage />\r\n\t\t}\r\n\r\n\t\treturn this.props.children;\r\n\t}\r\n}\r\n\r\nexport default ErrorBoundary;","import {useState} from \"react\";\r\n\r\nimport RandomChar from '../randomChar/RandomChar';\r\nimport CharList from '../charList/CharList';\r\nimport CharInfo from '../charInfo/CharInfo';\r\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\r\n\r\n\r\nimport decoration from '../../resources/img/vision.png';\r\n\r\nconst MainPage = () => {\r\n\r\n\tconst [selectedChar, setChar] =  useState(null);\r\n\r\n\r\n\tconst onCharSelected = (id) => {\r\n\t\tsetChar(id);\r\n\t}\r\n\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<ErrorBoundary>\r\n\t\t\t\t<RandomChar />\r\n\t\t\t</ErrorBoundary>\r\n\t\t\t<div className=\"char__content\">\r\n\t\t\t\t<ErrorBoundary>\r\n\t\t\t\t\t<CharList onCharSelected={onCharSelected} />\r\n\t\t\t\t</ErrorBoundary>\r\n\t\t\t\t<ErrorBoundary>\r\n\t\t\t\t\t<CharInfo charId={selectedChar} />\r\n\t\t\t\t</ErrorBoundary>\r\n\t\t\t</div>\r\n\t\t\t<img className=\"bg-decoration\" src={decoration} alt=\"vision\"/>\r\n\t\t</>\r\n\t)\r\n}\r\n\r\nexport default MainPage;","import  {useState, useCallback} from \"react\";\r\n\r\nexport const useHttp = () => {\r\n\tconst [loading, setLoading] = useState(false);\r\n\tconst [error, setError] = useState(null);\r\n\r\n\tconst request = useCallback(async (url, method = \"GET\", body = null, headers = {'Content-Type': 'application/json'}) => {\r\n\r\n\t\tsetLoading(true);\r\n\r\n\t\ttry {\r\n\t\t\tconst response = await fetch(url, {method, body, headers});\r\n\r\n\t\t\tif (!response.ok) {\r\n\t\t\t\tthrow new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n\t\t\t}\r\n\r\n\t\t\tconst data = await response.json();\r\n\r\n\t\t\tsetLoading(false);\r\n\t\t\treturn data;\r\n\r\n\t\t} catch (e) {\r\n\t\t\tsetLoading(false);\r\n\t\t\tsetError(e.message);\r\n\t\t\tthrow e;\r\n\t\t}\r\n\t}, [])\r\n\r\n\tconst clearError = useCallback(() => setError(null), []);\r\n\r\n\treturn {loading, request, error, clearError};\r\n}","import {useHttp} from \"../hooks/http.hook\";\r\n\r\nconst useMarvelService = () => {\r\n\tconst {loading, request, error, clearError} = useHttp();\r\n\r\n\tconst _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n\tconst _apiKey = 'apikey=81c9ec44faf041042c369770623c2248';\r\n\tconst _baseOffset = 210;\r\n\r\n\r\n\tconst getAllCharacters = async (offset = _baseOffset) => {\r\n\t\tconst res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n\t\treturn res.data.results.map(_transformCharacter);\r\n\t}\r\n\r\n\tconst getCharacter = async (id) => {\r\n\t\tconst res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n\t\treturn _transformCharacter(res.data.results[0]);\r\n\t}\r\n\r\n\tconst getAllComics = async (offset = 0) => {\r\n\t\tconst res = await request(\r\n\t\t\t`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`\r\n\t\t)\r\n\r\n\t\treturn res.data.results.map(_transformComics);\r\n\t}\r\n\r\n\tconst getComic = async (id) => {\r\n\t\tconst res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n\t\treturn _transformComics(res.data.results[0]);\r\n\t}\r\n\r\n\tconst _transformCharacter = (char) => {\r\n\t\treturn {\r\n\t\t\tid: char.id,\r\n\t\t\tname: char.name,\r\n\t\t\tdescription: char.description\r\n\t\t\t\t? `${char.description.slice(0, 210)}...`\r\n\t\t\t\t: 'There is no description for this character',\r\n\t\t\tthumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n\t\t\thomepage: char.urls[0].url,\r\n\t\t\twiki: char.urls[1].url,\r\n\t\t\tcomics: char.comics.items\r\n\t\t}\r\n\t}\r\n\r\n\tconst _transformComics = (comics) => {\r\n\t\treturn {\r\n\t\t\tid: comics.id,\r\n\t\t\ttitle: comics.title,\r\n\t\t\tdescription: comics.description || \"There is no description\",\r\n\t\t\tpageCount: comics.pageCount\r\n\t\t\t\t? `${comics.pageCount} p.`\r\n\t\t\t\t: \"No information about the number of pages\",\r\n\t\t\tthumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\r\n\t\t\tlanguage: comics.textObjects[0]?.language || \"en-us\",\r\n\t\t\tprice: comics.prices[0].price\r\n\t\t\t\t? `${comics.prices[0].price}$`\r\n\t\t\t\t: \"not available\",\r\n\t\t}\r\n\t}\r\n\r\n\treturn {\r\n\t\tloading,\r\n\t\terror,\r\n\t\tclearError,\r\n\t\tgetAllCharacters,\r\n\t\tgetCharacter,\r\n\t\tgetAllComics,\r\n\t\tgetComic\r\n\t};\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\t\t\t// Неизмененный классовый компонент\r\n// class MarvelService {\r\n// \t_apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n// \t_apiKey = 'apikey=81c9ec44faf041042c369770623c2248';\r\n// \t_baseOffset = 210;\r\n//\r\n// \tgetResource = async (url) => {\r\n// \t\tlet res = await fetch(url);\r\n//\r\n// \t\tif (!res.ok) {\r\n// \t\t\tthrow new Error(`Could not fetch ${url}, status: ${res.status}`);\r\n// \t\t}\r\n//\r\n// \t\treturn await res.json();\r\n// \t}\r\n//\r\n// \tgetAllCharacters = async (offset = this._baseOffset) => {\r\n// \t\tconst res = await this.getResource(`${this._apiBase}characters?limit=9&offset=${offset}&${this._apiKey}`);\r\n// \t\treturn res.data.results.map(this._transformCharacter);\r\n// \t}\r\n//\r\n// \tgetCharacter = async (id) => {\r\n// \t\tconst res = await this.getResource(`${this._apiBase}characters/${id}?${this._apiKey}`);\r\n// \t\treturn this._transformCharacter(res.data.results[0]);\r\n// \t}\r\n//\r\n// \t_transformCharacter = (char) => {\r\n// \t\treturn {\r\n// \t\t\tid: char.id,\r\n// \t\t\tname: char.name,\r\n// \t\t\tdescription: char.description ? `${char.description.slice(0, 210)}...` : 'There is no description for this character',\r\n// \t\t\tthumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n// \t\t\thomepage: char.urls[0].url,\r\n// \t\t\twiki: char.urls[1].url,\r\n// \t\t\tcomics: char.comics.items\r\n// \t\t}\r\n// \t}\r\n// }\r\n\r\nexport default useMarvelService;"],"names":["ErrorMessage","_jsx","style","display","width","height","objectFit","margin","src","img","alt","View","_ref","char","name","description","thumbnail","homepage","wiki","imgStyle","_jsxs","className","children","href","RandomChar","setChar","useState","loading","error","getCharacter","clearError","useMarvelService","useEffect","updateChar","timerId","setInterval","clearInterval","onCharLoaded","id","Math","floor","random","then","errorMessage","spinner","Spinner","content","onClick","mjolnir","getChildMapping","mapFn","result","Object","create","Children","map","c","forEach","child","key","isValidElement","mapper","getProp","prop","props","getNextChildMapping","nextProps","prevChildMapping","onExited","nextChildMapping","prev","next","getValueForKey","i","nextKeysPending","pendingKeys","prevKey","length","push","childMapping","nextKey","pendingNextKey","mergeChildMappings","keys","hasPrev","hasNext","prevChild","isLeaving","in","cloneElement","bind","exit","enter","values","obj","k","TransitionGroup","_React$Component","context","_this","handleExited","call","this","self","ReferenceError","_assertThisInitialized","state","contextValue","isMounting","firstRender","_inheritsLoose","_proto","prototype","componentDidMount","mounted","setState","componentWillUnmount","getDerivedStateFromProps","appear","node","currentChildMapping","_extends","render","_this$props","Component","component","childFactory","_objectWithoutPropertiesLoose","React","TransitionGroupContext","Provider","value","propTypes","defaultProps","charList","setCharList","newItemLoading","setNewItemLoading","offset","setOffset","charEnded","setCharEnded","getAllCharacters","onRequest","initial","onCharListLoaded","newCharList","ended","itemRefs","useRef","focusOnItem","current","item","classList","remove","add","focus","items","arr","CSSTransition","timeout","classNames","tabIndex","ref","el","onCharSelected","onKeyDown","e","renderItems","disabled","Skeleton","_Fragment","comics","charId","skeleton","ErrorBoundary","constructor","arguments","componentDidCatch","errorInfo","console","log","MainPage","selectedChar","CharList","CharInfo","decoration","request","useHttp","setLoading","setError","useCallback","async","url","method","undefined","body","headers","response","fetch","ok","Error","concat","status","data","json","message","_apiBase","_apiKey","_transformCharacter","slice","path","extension","urls","_transformComics","_comics$textObjects$","title","pageCount","language","textObjects","price","prices","results","res","getAllComics","getComic"],"sourceRoot":""}