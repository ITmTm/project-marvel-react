{"version":3,"file":"static/js/156.fa989a0e.chunk.js","mappings":"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","sources":["components/appBanner/AppBanner.js","components/errorMessage/ErrorMessage.js","components/pages/SinglePage.js","hooks/http.hook.js","services/MarvelService.js","components/skeleton/Skeleton.js","utils/setContent.js"],"sourcesContent":["import './appBanner.scss';\nimport avengers from '../../resources/img/Avengers.png';\nimport avengersLogo from '../../resources/img/Avengers_logo.png';\n\nconst AppBanner = () => {\n    return (\n        <div className=\"app__banner\">\n            <img src={avengers} alt=\"Avengers\"/>\n            <div className=\"app__banner-text\">\n                New comics every week!<br/>\n                Stay tuned!\n            </div>\n            <img src={avengersLogo} alt=\"Avengers logo\"/>\n        </div>\n    )\n}\n\nexport default AppBanner;","import img from './error.gif';\r\nconst ErrorMessage = () => {\r\n\treturn (\r\n\t\t<img style={{display: 'block', width: '450px', height: '250px', objectFit: 'contain', margin: '0 auto'}} src={img} alt='Error' />\r\n\t)\r\n}\r\n\r\nexport default ErrorMessage;","import { useParams } from \"react-router-dom\";\r\nimport { useState, useEffect, } from \"react\";\r\n\r\nimport useMarvelService from \"../../services/MarvelService\";\r\nimport AppBanner from \"../appBanner/AppBanner\";\r\nimport setContent from \"../../utils/setContent\";\r\n\r\nconst SinglePage = ({Component, dataType}) => {\r\n\tconst {id} = useParams();\r\n\tconst [data, setData] = useState(null);\r\n\tconst {getComic, getCharacter, clearError, process,setProcess} = useMarvelService();\r\n\r\n\tuseEffect(() => {\r\n\t\tupdateData()\r\n\t}, [id])\r\n\r\n\tconst updateData = () => {\r\n\t\tclearError();\r\n\r\n\t\tswitch (dataType) {\r\n\t\t\tcase 'comic':\r\n\t\t\t\tgetComic(id).then(onDataLoaded).then(() => setProcess('confirmed'));\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'character':\r\n\t\t\t\tgetCharacter(id).then(onDataLoaded).then(() => setProcess('confirmed'));\r\n\t\t}\r\n\t}\r\n\r\n\tconst onDataLoaded = (data) => {\r\n\t\tsetData(data);\r\n\t}\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<AppBanner />\r\n\t\t\t{setContent(process, Component, data)}\r\n\t\t</>\r\n\t)\r\n}\r\n\r\nexport default SinglePage;","import  {useState, useCallback} from \"react\";\r\n\r\nexport const useHttp = () => {\r\n\tconst [process, setProcess] = useState('waiting');\r\n\r\n\tconst request = useCallback(async (url, method = \"GET\", body = null, headers = {'Content-Type': 'application/json'}) => {\r\n\r\n\t\tsetProcess('loading');\r\n\r\n\t\ttry {\r\n\t\t\tconst response = await fetch(url, {method, body, headers});\r\n\r\n\t\t\tif (!response.ok) {\r\n\t\t\t\tthrow new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n\t\t\t}\r\n\r\n\t\t\tconst data = await response.json();\r\n\r\n\t\t\treturn data;\r\n\r\n\t\t} catch (e) {\r\n\t\t\tsetProcess('error');\r\n\t\t\tthrow e;\r\n\t\t}\r\n\t}, [])\r\n\r\n\tconst clearError = useCallback(() => {\r\n\t\tsetProcess('loading');\r\n\t}, []);\r\n\r\n\treturn {request, clearError, process, setProcess};\r\n}","import {useHttp} from \"../hooks/http.hook\";\r\n\r\nconst useMarvelService = () => {\r\n\tconst {request, clearError, process, setProcess} = useHttp();\r\n\r\n\tconst _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n\tconst _apiKey = 'apikey=81c9ec44faf041042c369770623c2248';\r\n\tconst _baseOffset = 210;\r\n\r\n\r\n\tconst getAllCharacters = async (offset = _baseOffset) => {\r\n\t\tconst res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n\t\treturn res.data.results.map(_transformCharacter);\r\n\t}\r\n\r\n\t// Отдельный метод для поиска по имени\r\n\tconst getCharacterByName = async (name) => {\r\n\t\tconst res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n\t\treturn res.data.results.map(_transformCharacter);\r\n\t}\r\n\r\n\tconst getCharacter = async (id) => {\r\n\t\tconst res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n\t\treturn _transformCharacter(res.data.results[0]);\r\n\t}\r\n\r\n\tconst getAllComics = async (offset = 0) => {\r\n\t\tconst res = await request(\r\n\t\t\t`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`\r\n\t\t)\r\n\r\n\t\treturn res.data.results.map(_transformComics);\r\n\t}\r\n\r\n\tconst getComic = async (id) => {\r\n\t\tconst res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n\t\treturn _transformComics(res.data.results[0]);\r\n\t}\r\n\r\n\tconst _transformCharacter = (char) => {\r\n\t\treturn {\r\n\t\t\tid: char.id,\r\n\t\t\tname: char.name,\r\n\t\t\tdescription: char.description\r\n\t\t\t\t? `${char.description.slice(0, 210)}...`\r\n\t\t\t\t: 'There is no description for this character',\r\n\t\t\tthumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n\t\t\thomepage: char.urls[0].url,\r\n\t\t\twiki: char.urls[1].url,\r\n\t\t\tcomics: char.comics.items\r\n\t\t}\r\n\t}\r\n\r\n\tconst _transformComics = (comics) => {\r\n\t\treturn {\r\n\t\t\tid: comics.id,\r\n\t\t\ttitle: comics.title,\r\n\t\t\tdescription: comics.description || \"There is no description\",\r\n\t\t\tpageCount: comics.pageCount\r\n\t\t\t\t? `${comics.pageCount} p.`\r\n\t\t\t\t: \"No information about the number of pages\",\r\n\t\t\tthumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\r\n\t\t\tlanguage: comics.textObjects[0]?.language || \"en-us\",\r\n\t\t\tprice: comics.prices[0].price\r\n\t\t\t\t? `${comics.prices[0].price}$`\r\n\t\t\t\t: \"not available\",\r\n\t\t}\r\n\t}\r\n\r\n\treturn {\r\n\t\tclearError,\r\n\t\tprocess,\r\n\t\tsetProcess,\r\n\t\tgetAllCharacters,\r\n\t\tgetCharacterByName,\r\n\t\tgetCharacter,\r\n\t\tgetAllComics,\r\n\t\tgetComic\r\n\t};\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\t\t\t// Неизмененный классовый компонент\r\n// class MarvelService {\r\n// \t_apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n// \t_apiKey = 'apikey=81c9ec44faf041042c369770623c2248';\r\n// \t_baseOffset = 210;\r\n//\r\n// \tgetResource = async (url) => {\r\n// \t\tlet res = await fetch(url);\r\n//\r\n// \t\tif (!res.ok) {\r\n// \t\t\tthrow new Error(`Could not fetch ${url}, status: ${res.status}`);\r\n// \t\t}\r\n//\r\n// \t\treturn await res.json();\r\n// \t}\r\n//\r\n// \tgetAllCharacters = async (offset = this._baseOffset) => {\r\n// \t\tconst res = await this.getResource(`${this._apiBase}characters?limit=9&offset=${offset}&${this._apiKey}`);\r\n// \t\treturn res.data.results.map(this._transformCharacter);\r\n// \t}\r\n//\r\n// \tgetCharacter = async (id) => {\r\n// \t\tconst res = await this.getResource(`${this._apiBase}characters/${id}?${this._apiKey}`);\r\n// \t\treturn this._transformCharacter(res.data.results[0]);\r\n// \t}\r\n//\r\n// \t_transformCharacter = (char) => {\r\n// \t\treturn {\r\n// \t\t\tid: char.id,\r\n// \t\t\tname: char.name,\r\n// \t\t\tdescription: char.description ? `${char.description.slice(0, 210)}...` : 'There is no description for this character',\r\n// \t\t\tthumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n// \t\t\thomepage: char.urls[0].url,\r\n// \t\t\twiki: char.urls[1].url,\r\n// \t\t\tcomics: char.comics.items\r\n// \t\t}\r\n// \t}\r\n// }\r\n\r\nexport default useMarvelService;","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import Spinner from \"../components/spinner/Spinner\";\r\nimport ErrorMessage from \"../components/errorMessage/ErrorMessage\";\r\nimport Skeleton from \"../components/skeleton/Skeleton\";\r\n\r\nconst setContent = (process, Component, data) => {\r\n\tswitch (process) {\r\n\t\tcase 'waiting':\r\n\t\t\treturn <Skeleton />;\r\n\t\tcase 'loading':\r\n\t\t\treturn <Spinner />;\r\n\t\tcase 'confirmed':\r\n\t\t\treturn <Component data={data} />;\r\n\t\tcase 'error':\r\n\t\t\treturn <ErrorMessage />;\r\n\r\n\t\tdefault:\r\n\t\t\tthrow new Error('Unexpected process state');\r\n\t}\r\n}\r\n\r\nexport default setContent;"],"names":["AppBanner","_jsxs","className","children","_jsx","src","avengers","alt","avengersLogo","ErrorMessage","style","display","width","height","objectFit","margin","img","_ref","Component","dataType","id","useParams","data","setData","useState","getComic","getCharacter","clearError","process","setProcess","useMarvelService","useEffect","updateData","then","onDataLoaded","_Fragment","setContent","request","useHttp","useCallback","async","url","method","arguments","length","undefined","body","headers","response","fetch","ok","Error","concat","status","json","e","_apiBase","_apiKey","_transformCharacter","char","name","description","slice","thumbnail","path","extension","homepage","urls","wiki","comics","items","_transformComics","_comics$textObjects$","title","pageCount","language","textObjects","price","prices","getAllCharacters","offset","results","map","getCharacterByName","res","getAllComics","Skeleton","Spinner"],"sourceRoot":""}