{"version":3,"file":"static/js/349.f8e78fed.chunk.js","mappings":"kNACA,MAMA,EANqBA,KAEnBC,EAAAA,EAAAA,KAAA,OAAKC,MAAO,CAACC,QAAS,QAASC,MAAO,QAASC,OAAQ,QAASC,UAAW,UAAWC,OAAQ,UAAWC,IAAKC,EAAKC,IAAI,S,mLCCzH,MAaA,EAbkBC,KAEVC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,cAAaC,SAAA,EACxBb,EAAAA,EAAAA,KAAA,OAAKO,IAAKO,EAAUL,IAAI,cACxBE,EAAAA,EAAAA,MAAA,OAAKC,UAAU,mBAAkBC,SAAA,CAAC,0BACRb,EAAAA,EAAAA,KAAA,SAAK,kBAG/BA,EAAAA,EAAAA,KAAA,OAAKO,IAAKQ,EAAcN,IAAI,qB,gDCHxC,MA4EA,EA5EmBO,KAGf,MAAOC,EAAYC,IAAiBC,EAAAA,EAAAA,UAAS,KACtCC,EAAgBC,IAAqBF,EAAAA,EAAAA,WAAS,IAC9CG,EAAQC,IAAaJ,EAAAA,EAAAA,UAAS,IAC9BK,EAAaC,IAAkBN,EAAAA,EAAAA,WAAS,IAEzC,QAACO,EAAO,MAAEC,EAAK,aAAEC,IAAgBC,EAAAA,EAAAA,MAEvCC,EAAAA,EAAAA,YAAU,KACNC,EAAUT,GAAQ,EAAK,GACxB,IAEH,MAAMS,EAAYA,CAACT,EAAQU,KACbX,GAAVW,GACAJ,EAAaN,GACRW,KAAKC,EAAmB,EAG3BA,EAAsBC,IACxB,IAAIC,GAAQ,EACRD,EAAcE,OAAS,IACvBD,GAAQ,GAGZlB,EAAc,IAAID,KAAekB,IACjCd,GAAkB,GAClBE,EAAUD,EAAS,GACnBG,EAAeW,EAAM,EAuBzB,MAAME,EApBN,SAAqBC,GACjB,MAAMD,EAAQC,EAAIC,KAAI,CAACC,EAAMC,KAErB1C,EAAAA,EAAAA,KAAA,MAAIY,UAAU,eAAcC,UACxBF,EAAAA,EAAAA,MAACgC,EAAAA,GAAI,CAACC,GAAE,WAAAC,OAAaJ,EAAKK,IAAKjC,SAAA,EAC3Bb,EAAAA,EAAAA,KAAA,OAAKO,IAAKkC,EAAKM,UAAWtC,IAAKgC,EAAKO,MAAOpC,UAAU,sBACrDZ,EAAAA,EAAAA,KAAA,OAAKY,UAAU,oBAAmBC,SAAE4B,EAAKO,SACzChD,EAAAA,EAAAA,KAAA,OAAKY,UAAU,qBAAoBC,SAAE4B,EAAKQ,YAJhBP,KAU1C,OACI1C,EAAAA,EAAAA,KAAA,MAAIY,UAAU,eAAcC,SACvByB,GAGb,CAEcY,CAAYjC,GAEpBkC,EAAexB,GAAQ3B,EAAAA,EAAAA,KAACD,EAAAA,EAAY,IAAM,KAC1CqD,EAAU1B,IAAYN,GAAiBpB,EAAAA,EAAAA,KAACqD,EAAAA,EAAO,IAAM,KAG3D,OACI1C,EAAAA,EAAAA,MAAA,OAAKC,UAAU,eAAcC,SAAA,CACxBsC,EACAC,EACAd,GAEDtC,EAAAA,EAAAA,KAAA,UACIsD,SAAUlC,EACVnB,MAAO,CAAC,QAAWuB,EAAc,OAAS,SAC1CZ,UAAU,mCACV2C,QAASA,IAAMxB,EAAUT,GAAQT,UAEjCb,EAAAA,EAAAA,KAAA,OAAKY,UAAU,QAAOC,SAAC,kBAEzB,ECpEd,EAVmB2C,KAGjB7C,EAAAA,EAAAA,MAAA8C,EAAAA,SAAA,CAAA5C,SAAA,EACCb,EAAAA,EAAAA,KAACU,EAAS,KACVV,EAAAA,EAAAA,KAACgB,EAAU,M,6CCNP,MCqHP,EArHyBa,KACxB,MAAM,QAACH,EAAO,QAAEgC,EAAO,MAAE/B,EAAK,WAAEgC,GDDVC,MACtB,MAAOlC,EAASmC,IAAc1C,EAAAA,EAAAA,WAAS,IAChCQ,EAAOmC,IAAY3C,EAAAA,EAAAA,UAAS,MA2BnC,MAAO,CAACO,UAASgC,SAzBDK,EAAAA,EAAAA,cAAYC,eAAOC,GAAsF,IAAjFC,EAAMC,UAAA9B,OAAA,QAAA+B,IAAAD,UAAA,GAAAA,UAAA,GAAG,MAAOE,EAAIF,UAAA9B,OAAA,QAAA+B,IAAAD,UAAA,GAAAA,UAAA,GAAG,KAAMG,EAAOH,UAAA9B,OAAA,QAAA+B,IAAAD,UAAA,GAAAA,UAAA,GAAG,CAAC,eAAgB,oBAE/FN,GAAW,GAEX,IACC,MAAMU,QAAiBC,MAAMP,EAAK,CAACC,SAAQG,OAAMC,YAEjD,IAAKC,EAASE,GACb,MAAM,IAAIC,MAAM,mBAAD7B,OAAoBoB,EAAG,cAAApB,OAAa0B,EAASI,SAG7D,MAAMC,QAAaL,EAASM,OAG5B,OADAhB,GAAW,GACJe,CAER,CAAE,MAAOE,GAGR,MAFAjB,GAAW,GACXC,EAASgB,EAAEC,SACLD,CACP,CACD,GAAG,IAIuBnD,QAAOgC,YAFdI,EAAAA,EAAAA,cAAY,IAAMD,EAAS,OAAO,IAET,EC5BEF,GAExCoB,EAAW,4CACXC,EAAU,0CA2BVC,EAAuBC,IACrB,CACNrC,GAAIqC,EAAKrC,GACTsC,KAAMD,EAAKC,KACXC,YAAaF,EAAKE,YAAW,GAAAxC,OACvBsC,EAAKE,YAAYC,MAAM,EAAG,KAAI,OACjC,6CACHvC,UAAWoC,EAAKpC,UAAUwC,KAAO,IAAMJ,EAAKpC,UAAUyC,UACtDC,SAAUN,EAAKO,KAAK,GAAGzB,IACvB0B,KAAMR,EAAKO,KAAK,GAAGzB,IACnB2B,OAAQT,EAAKS,OAAOtD,QAIhBuD,EAAoBD,IAAY,IAADE,EACpC,MAAO,CACNhD,GAAI8C,EAAO9C,GACXE,MAAO4C,EAAO5C,MACdqC,YAAaO,EAAOP,aAAe,0BACnCU,UAAWH,EAAOG,UAAS,GAAAlD,OACrB+C,EAAOG,UAAS,OACnB,2CACHhD,UAAW6C,EAAO7C,UAAUwC,KAAO,IAAMK,EAAO7C,UAAUyC,UAC1DQ,UAA+B,QAArBF,EAAAF,EAAOK,YAAY,UAAE,IAAAH,OAAA,EAArBA,EAAuBE,WAAY,QAC7C/C,MAAO2C,EAAOM,OAAO,GAAGjD,MAAK,GAAAJ,OACvB+C,EAAOM,OAAO,GAAGjD,MAAK,KACzB,gBACH,EAGF,MAAO,CACNvB,UACAC,QACAgC,aACAwC,iBAzDwBnC,iBAAiC,IAA1B1C,EAAM6C,UAAA9B,OAAA,QAAA+B,IAAAD,UAAA,GAAAA,UAAA,GAHlB,IAKnB,aADkBT,EAAQ,GAADb,OAAImC,EAAQ,8BAAAnC,OAA6BvB,EAAM,KAAAuB,OAAIoC,KACjEL,KAAKwB,QAAQ5D,IAAI0C,EAC7B,EAuDCmB,aArDoBrC,UACpB,MAAMsC,QAAY5C,EAAQ,GAADb,OAAImC,EAAQ,eAAAnC,OAAcC,EAAE,KAAAD,OAAIoC,IACzD,OAAOC,EAAoBoB,EAAI1B,KAAKwB,QAAQ,GAAG,EAoD/CxE,aAjDoBoC,iBAAuB,IAAhB1C,EAAM6C,UAAA9B,OAAA,QAAA+B,IAAAD,UAAA,GAAAA,UAAA,GAAG,EAKpC,aAJkBT,EAAQ,GAADb,OACrBmC,EAAQ,8CAAAnC,OAA6CvB,EAAM,KAAAuB,OAAIoC,KAGxDL,KAAKwB,QAAQ5D,IAAIqD,EAC7B,EA4CCU,SA1CgBvC,UAChB,MAAMsC,QAAY5C,EAAQ,GAADb,OAAImC,EAAQ,WAAAnC,OAAUC,EAAE,KAAAD,OAAIoC,IACrD,OAAOY,EAAiBS,EAAI1B,KAAKwB,QAAQ,GAAG,EAyC5C,C","sources":["components/errorMessage/ErrorMessage.js","components/appBanner/AppBanner.js","components/comicsList/ComicsList.js","components/pages/ComicsPage.js","hooks/http.hook.js","services/MarvelService.js"],"sourcesContent":["import img from './error.gif';\r\nconst ErrorMessage = () => {\r\n\treturn (\r\n\t\t<img style={{display: 'block', width: '450px', height: '250px', objectFit: 'contain', margin: '0 auto'}} src={img} alt='Error' />\r\n\t)\r\n}\r\n\r\nexport default ErrorMessage;","import './appBanner.scss';\nimport avengers from '../../resources/img/Avengers.png';\nimport avengersLogo from '../../resources/img/Avengers_logo.png';\n\nconst AppBanner = () => {\n    return (\n        <div className=\"app__banner\">\n            <img src={avengers} alt=\"Avengers\"/>\n            <div className=\"app__banner-text\">\n                New comics every week!<br/>\n                Stay tuned!\n            </div>\n            <img src={avengersLogo} alt=\"Avengers logo\"/>\n        </div>\n    )\n}\n\nexport default AppBanner;","import {useState, useEffect} from \"react\";\nimport {Link} from \"react-router-dom\";\nimport useMarvelService from \"../../services/MarvelService\";\nimport Spinner from \"../spinner/Spinner\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\n\nimport './comicsList.scss';\n\n\nconst ComicsList = () => {\n\n\n    const [comicsList, setComicsList] = useState([]);\n    const [newItemLoading, setNewItemLoading] = useState(false);\n    const [offset, setOffset] = useState(0);\n    const [comicsEnded, setComicsEnded] = useState(false);\n\n    const {loading, error, getAllComics} = useMarvelService();\n\n    useEffect(() => {\n        onRequest(offset, true);\n    }, [])\n\n    const onRequest = (offset, initial) => {\n        initial ? setNewItemLoading(false) : setNewItemLoading(true);\n        getAllComics(offset)\n            .then(onComicsListLoaded)\n    }\n\n    const onComicsListLoaded = (newComicsList) => {\n        let ended = false;\n        if (newComicsList.length < 8) {\n            ended = true;\n        }\n\n        setComicsList([...comicsList, ...newComicsList]);\n        setNewItemLoading(false);\n        setOffset(offset + 8);\n        setComicsEnded(ended);\n    }\n\n    function renderItems(arr) {\n        const items = arr.map((item, i) => {\n            return (\n                <li className=\"comics__item\" key={i}>\n                    <Link to={`/comics/${item.id}`}>\n                        <img src={item.thumbnail} alt={item.title} className=\"comics__item-img\"/>\n                        <div className=\"comics__item-name\">{item.title}</div>\n                        <div className=\"comics__item-price\">{item.price}</div>\n                    </Link>\n                </li>\n            )\n        })\n\n        return (\n            <ul className=\"comics__grid\">\n                {items}\n            </ul>\n        )\n    }\n\n    const items = renderItems(comicsList);\n\n    const errorMessage = error ? <ErrorMessage /> : null;\n    const spinner = loading && !newItemLoading ? <Spinner /> : null;\n\n\n    return (\n        <div className=\"comics__list\">\n            {errorMessage}\n            {spinner}\n            {items}\n\n            <button\n                disabled={newItemLoading}\n                style={{'display': comicsEnded ? 'none' : 'block'}}\n                className=\"button button__main button__long\"\n                onClick={() => onRequest(offset)}\n            >\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n}\n\nexport default ComicsList;","import AppBanner from \"../appBanner/AppBanner\";\r\nimport ComicsList from \"../comicsList/ComicsList\";\r\n\r\nconst ComicsPage = () => {\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<AppBanner/>\r\n\t\t\t<ComicsList/>\r\n\t\t</>\r\n\t)\r\n}\r\n\r\nexport default ComicsPage;","import  {useState, useCallback} from \"react\";\r\n\r\nexport const useHttp = () => {\r\n\tconst [loading, setLoading] = useState(false);\r\n\tconst [error, setError] = useState(null);\r\n\r\n\tconst request = useCallback(async (url, method = \"GET\", body = null, headers = {'Content-Type': 'application/json'}) => {\r\n\r\n\t\tsetLoading(true);\r\n\r\n\t\ttry {\r\n\t\t\tconst response = await fetch(url, {method, body, headers});\r\n\r\n\t\t\tif (!response.ok) {\r\n\t\t\t\tthrow new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n\t\t\t}\r\n\r\n\t\t\tconst data = await response.json();\r\n\r\n\t\t\tsetLoading(false);\r\n\t\t\treturn data;\r\n\r\n\t\t} catch (e) {\r\n\t\t\tsetLoading(false);\r\n\t\t\tsetError(e.message);\r\n\t\t\tthrow e;\r\n\t\t}\r\n\t}, [])\r\n\r\n\tconst clearError = useCallback(() => setError(null), []);\r\n\r\n\treturn {loading, request, error, clearError};\r\n}","import {useHttp} from \"../hooks/http.hook\";\r\n\r\nconst useMarvelService = () => {\r\n\tconst {loading, request, error, clearError} = useHttp();\r\n\r\n\tconst _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n\tconst _apiKey = 'apikey=81c9ec44faf041042c369770623c2248';\r\n\tconst _baseOffset = 210;\r\n\r\n\r\n\tconst getAllCharacters = async (offset = _baseOffset) => {\r\n\t\tconst res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n\t\treturn res.data.results.map(_transformCharacter);\r\n\t}\r\n\r\n\tconst getCharacter = async (id) => {\r\n\t\tconst res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n\t\treturn _transformCharacter(res.data.results[0]);\r\n\t}\r\n\r\n\tconst getAllComics = async (offset = 0) => {\r\n\t\tconst res = await request(\r\n\t\t\t`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`\r\n\t\t)\r\n\r\n\t\treturn res.data.results.map(_transformComics);\r\n\t}\r\n\r\n\tconst getComic = async (id) => {\r\n\t\tconst res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n\t\treturn _transformComics(res.data.results[0]);\r\n\t}\r\n\r\n\tconst _transformCharacter = (char) => {\r\n\t\treturn {\r\n\t\t\tid: char.id,\r\n\t\t\tname: char.name,\r\n\t\t\tdescription: char.description\r\n\t\t\t\t? `${char.description.slice(0, 210)}...`\r\n\t\t\t\t: 'There is no description for this character',\r\n\t\t\tthumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n\t\t\thomepage: char.urls[0].url,\r\n\t\t\twiki: char.urls[1].url,\r\n\t\t\tcomics: char.comics.items\r\n\t\t}\r\n\t}\r\n\r\n\tconst _transformComics = (comics) => {\r\n\t\treturn {\r\n\t\t\tid: comics.id,\r\n\t\t\ttitle: comics.title,\r\n\t\t\tdescription: comics.description || \"There is no description\",\r\n\t\t\tpageCount: comics.pageCount\r\n\t\t\t\t? `${comics.pageCount} p.`\r\n\t\t\t\t: \"No information about the number of pages\",\r\n\t\t\tthumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\r\n\t\t\tlanguage: comics.textObjects[0]?.language || \"en-us\",\r\n\t\t\tprice: comics.prices[0].price\r\n\t\t\t\t? `${comics.prices[0].price}$`\r\n\t\t\t\t: \"not available\",\r\n\t\t}\r\n\t}\r\n\r\n\treturn {\r\n\t\tloading,\r\n\t\terror,\r\n\t\tclearError,\r\n\t\tgetAllCharacters,\r\n\t\tgetCharacter,\r\n\t\tgetAllComics,\r\n\t\tgetComic\r\n\t};\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\t\t\t// Неизмененный классовый компонент\r\n// class MarvelService {\r\n// \t_apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n// \t_apiKey = 'apikey=81c9ec44faf041042c369770623c2248';\r\n// \t_baseOffset = 210;\r\n//\r\n// \tgetResource = async (url) => {\r\n// \t\tlet res = await fetch(url);\r\n//\r\n// \t\tif (!res.ok) {\r\n// \t\t\tthrow new Error(`Could not fetch ${url}, status: ${res.status}`);\r\n// \t\t}\r\n//\r\n// \t\treturn await res.json();\r\n// \t}\r\n//\r\n// \tgetAllCharacters = async (offset = this._baseOffset) => {\r\n// \t\tconst res = await this.getResource(`${this._apiBase}characters?limit=9&offset=${offset}&${this._apiKey}`);\r\n// \t\treturn res.data.results.map(this._transformCharacter);\r\n// \t}\r\n//\r\n// \tgetCharacter = async (id) => {\r\n// \t\tconst res = await this.getResource(`${this._apiBase}characters/${id}?${this._apiKey}`);\r\n// \t\treturn this._transformCharacter(res.data.results[0]);\r\n// \t}\r\n//\r\n// \t_transformCharacter = (char) => {\r\n// \t\treturn {\r\n// \t\t\tid: char.id,\r\n// \t\t\tname: char.name,\r\n// \t\t\tdescription: char.description ? `${char.description.slice(0, 210)}...` : 'There is no description for this character',\r\n// \t\t\tthumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n// \t\t\thomepage: char.urls[0].url,\r\n// \t\t\twiki: char.urls[1].url,\r\n// \t\t\tcomics: char.comics.items\r\n// \t\t}\r\n// \t}\r\n// }\r\n\r\nexport default useMarvelService;"],"names":["ErrorMessage","_jsx","style","display","width","height","objectFit","margin","src","img","alt","AppBanner","_jsxs","className","children","avengers","avengersLogo","ComicsList","comicsList","setComicsList","useState","newItemLoading","setNewItemLoading","offset","setOffset","comicsEnded","setComicsEnded","loading","error","getAllComics","useMarvelService","useEffect","onRequest","initial","then","onComicsListLoaded","newComicsList","ended","length","items","arr","map","item","i","Link","to","concat","id","thumbnail","title","price","renderItems","errorMessage","spinner","Spinner","disabled","onClick","ComicsPage","_Fragment","request","clearError","useHttp","setLoading","setError","useCallback","async","url","method","arguments","undefined","body","headers","response","fetch","ok","Error","status","data","json","e","message","_apiBase","_apiKey","_transformCharacter","char","name","description","slice","path","extension","homepage","urls","wiki","comics","_transformComics","_comics$textObjects$","pageCount","language","textObjects","prices","getAllCharacters","results","getCharacter","res","getComic"],"sourceRoot":""}