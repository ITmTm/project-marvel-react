{"version":3,"file":"static/js/347.5809e5a6.chunk.js","mappings":"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","sources":["components/errorMessage/ErrorMessage.js","components/pages/singleComicPage/SingleComicPage.js","hooks/http.hook.js","services/MarvelService.js"],"sourcesContent":["import img from './error.gif';\r\nconst ErrorMessage = () => {\r\n\treturn (\r\n\t\t<img style={{display: 'block', width: '450px', height: '250px', objectFit: 'contain', margin: '0 auto'}} src={img} alt='Error' />\r\n\t)\r\n}\r\n\r\nexport default ErrorMessage;","import {useParams, Link} from \"react-router-dom\";\r\nimport {useState, useEffect} from \"react\";\r\n\r\nimport useMarvelService from \"../../../services/MarvelService\";\r\nimport Spinner from \"../../spinner/Spinner\";\r\nimport ErrorMessage from \"../../errorMessage/ErrorMessage\";\r\n\r\nimport './singleComicPage.scss';\r\n\r\n\r\nconst SingleComicPage = () => {\r\n\tconst {comicId} = useParams();\r\n\tconst [comic, setComic] = useState(null);\r\n\tconst {loading, error, getComic, clearError} = useMarvelService();\r\n\r\n\r\n\tuseEffect(() => {\r\n\t\tupdateComic();\r\n\t\t// eslint-disable-next-line\r\n\t}, [comicId]);\r\n\r\n\r\n\r\n\r\n\tconst updateComic = () => {\r\n\r\n\t\tclearError();\r\n\t\tgetComic(comicId)\r\n\t\t\t.then(onComicLoaded);\r\n\t}\r\n\r\n\r\n\r\n\tconst onComicLoaded = (comic) => {\r\n\t\tsetComic(comic);\r\n\t}\r\n\r\n\tconst errorMessage = error ? <ErrorMessage /> : null;\r\n\tconst spinner = loading ? <Spinner /> : null;\r\n\tconst content = !(loading || error || !comic) ? <View comic={comic} /> : null;\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t{errorMessage}\r\n\t\t\t{spinner}\r\n\t\t\t{content}\r\n\t\t</>\r\n\t)\r\n}\r\n\r\nconst View = ({comic}) => {\r\n\tconst {title, description, pageCount, thumbnail, language, price} = comic;\r\n\r\n\treturn (\r\n\t\t<div className=\"single-comic\">\r\n\t\t\t<img src={thumbnail} alt={title} className=\"single-comic__img\"/>\r\n\t\t\t<div className=\"single-comic__info\">\r\n\t\t\t\t<h2 className=\"single-comic__name\">{title}</h2>\r\n\t\t\t\t<p className=\"single-comic__descr\">{description}</p>\r\n\t\t\t\t<p className=\"single-comic__descr\">{pageCount}</p>\r\n\t\t\t\t<p className=\"single-comic__descr\">Language: {language}</p>\r\n\t\t\t\t<div className=\"single-comic__price\">{price}</div>\r\n\t\t\t</div>\r\n\t\t\t<Link to='/comics' className=\"single-comic__back\">Back to all</Link>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default SingleComicPage;","import  {useState, useCallback} from \"react\";\r\n\r\nexport const useHttp = () => {\r\n\tconst [process, setProcess] = useState('waiting');\r\n\r\n\tconst request = useCallback(async (url, method = \"GET\", body = null, headers = {'Content-Type': 'application/json'}) => {\r\n\r\n\t\tsetProcess('loading');\r\n\r\n\t\ttry {\r\n\t\t\tconst response = await fetch(url, {method, body, headers});\r\n\r\n\t\t\tif (!response.ok) {\r\n\t\t\t\tthrow new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n\t\t\t}\r\n\r\n\t\t\tconst data = await response.json();\r\n\r\n\t\t\treturn data;\r\n\r\n\t\t} catch (e) {\r\n\t\t\tsetProcess('error');\r\n\t\t\tthrow e;\r\n\t\t}\r\n\t}, [])\r\n\r\n\tconst clearError = useCallback(() => {\r\n\t\tsetProcess('loading');\r\n\t}, []);\r\n\r\n\treturn {request, clearError, process, setProcess};\r\n}","import {useHttp} from \"../hooks/http.hook\";\r\n\r\nconst useMarvelService = () => {\r\n\tconst {request, clearError, process, setProcess} = useHttp();\r\n\r\n\tconst _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n\tconst _apiKey = 'apikey=81c9ec44faf041042c369770623c2248';\r\n\tconst _baseOffset = 210;\r\n\r\n\r\n\tconst getAllCharacters = async (offset = _baseOffset) => {\r\n\t\tconst res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n\t\treturn res.data.results.map(_transformCharacter);\r\n\t}\r\n\r\n\t// Отдельный метод для поиска по имени\r\n\tconst getCharacterByName = async (name) => {\r\n\t\tconst res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n\t\treturn res.data.results.map(_transformCharacter);\r\n\t}\r\n\r\n\tconst getCharacter = async (id) => {\r\n\t\tconst res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n\t\treturn _transformCharacter(res.data.results[0]);\r\n\t}\r\n\r\n\tconst getAllComics = async (offset = 0) => {\r\n\t\tconst res = await request(\r\n\t\t\t`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`\r\n\t\t)\r\n\r\n\t\treturn res.data.results.map(_transformComics);\r\n\t}\r\n\r\n\tconst getComic = async (id) => {\r\n\t\tconst res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n\t\treturn _transformComics(res.data.results[0]);\r\n\t}\r\n\r\n\tconst _transformCharacter = (char) => {\r\n\t\treturn {\r\n\t\t\tid: char.id,\r\n\t\t\tname: char.name,\r\n\t\t\tdescription: char.description\r\n\t\t\t\t? `${char.description.slice(0, 210)}...`\r\n\t\t\t\t: 'There is no description for this character',\r\n\t\t\tthumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n\t\t\thomepage: char.urls[0].url,\r\n\t\t\twiki: char.urls[1].url,\r\n\t\t\tcomics: char.comics.items\r\n\t\t}\r\n\t}\r\n\r\n\tconst _transformComics = (comics) => {\r\n\t\treturn {\r\n\t\t\tid: comics.id,\r\n\t\t\ttitle: comics.title,\r\n\t\t\tdescription: comics.description || \"There is no description\",\r\n\t\t\tpageCount: comics.pageCount\r\n\t\t\t\t? `${comics.pageCount} p.`\r\n\t\t\t\t: \"No information about the number of pages\",\r\n\t\t\tthumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\r\n\t\t\tlanguage: comics.textObjects[0]?.language || \"en-us\",\r\n\t\t\tprice: comics.prices[0].price\r\n\t\t\t\t? `${comics.prices[0].price}$`\r\n\t\t\t\t: \"not available\",\r\n\t\t}\r\n\t}\r\n\r\n\treturn {\r\n\t\tclearError,\r\n\t\tprocess,\r\n\t\tsetProcess,\r\n\t\tgetAllCharacters,\r\n\t\tgetCharacterByName,\r\n\t\tgetCharacter,\r\n\t\tgetAllComics,\r\n\t\tgetComic\r\n\t};\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\t\t\t// Неизмененный классовый компонент\r\n// class MarvelService {\r\n// \t_apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n// \t_apiKey = 'apikey=81c9ec44faf041042c369770623c2248';\r\n// \t_baseOffset = 210;\r\n//\r\n// \tgetResource = async (url) => {\r\n// \t\tlet res = await fetch(url);\r\n//\r\n// \t\tif (!res.ok) {\r\n// \t\t\tthrow new Error(`Could not fetch ${url}, status: ${res.status}`);\r\n// \t\t}\r\n//\r\n// \t\treturn await res.json();\r\n// \t}\r\n//\r\n// \tgetAllCharacters = async (offset = this._baseOffset) => {\r\n// \t\tconst res = await this.getResource(`${this._apiBase}characters?limit=9&offset=${offset}&${this._apiKey}`);\r\n// \t\treturn res.data.results.map(this._transformCharacter);\r\n// \t}\r\n//\r\n// \tgetCharacter = async (id) => {\r\n// \t\tconst res = await this.getResource(`${this._apiBase}characters/${id}?${this._apiKey}`);\r\n// \t\treturn this._transformCharacter(res.data.results[0]);\r\n// \t}\r\n//\r\n// \t_transformCharacter = (char) => {\r\n// \t\treturn {\r\n// \t\t\tid: char.id,\r\n// \t\t\tname: char.name,\r\n// \t\t\tdescription: char.description ? `${char.description.slice(0, 210)}...` : 'There is no description for this character',\r\n// \t\t\tthumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n// \t\t\thomepage: char.urls[0].url,\r\n// \t\t\twiki: char.urls[1].url,\r\n// \t\t\tcomics: char.comics.items\r\n// \t\t}\r\n// \t}\r\n// }\r\n\r\nexport default useMarvelService;"],"names":["ErrorMessage","_jsx","style","display","width","height","objectFit","margin","src","img","alt","View","_ref","comic","title","description","pageCount","thumbnail","language","price","_jsxs","className","children","Link","to","SingleComicPage","comicId","useParams","setComic","useState","loading","error","getComic","clearError","useMarvelService","useEffect","updateComic","then","onComicLoaded","errorMessage","spinner","Spinner","content","_Fragment","request","process","setProcess","useHttp","useCallback","async","url","method","arguments","length","undefined","body","headers","response","fetch","ok","Error","concat","status","json","e","_apiBase","_apiKey","_transformCharacter","char","id","name","slice","path","extension","homepage","urls","wiki","comics","items","_transformComics","_comics$textObjects$","textObjects","prices","getAllCharacters","offset","data","results","map","getCharacterByName","getCharacter","res","getAllComics"],"sourceRoot":""}