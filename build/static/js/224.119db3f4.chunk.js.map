{"version":3,"file":"static/js/224.119db3f4.chunk.js","mappings":"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","sources":["components/errorMessage/ErrorMessage.js","components/randomChar/RandomChar.js","components/charList/CharList.js","components/charInfo/CharInfo.js","components/charSearchForm/CharSearchForm.js","components/errorBoundary/ErrorBoundary.js","components/pages/MainPage.js","hooks/http.hook.js","services/MarvelService.js","components/skeleton/Skeleton.js","utils/setContent.js"],"sourcesContent":["import img from './error.gif';\r\nconst ErrorMessage = () => {\r\n\treturn (\r\n\t\t<img style={{display: 'block', width: '450px', height: '250px', objectFit: 'contain', margin: '0 auto'}} src={img} alt='Error' />\r\n\t)\r\n}\r\n\r\nexport default ErrorMessage;","// import {Component} from \"react\";\nimport {useState, useEffect} from \"react\";\nimport setContent from \"../../utils/setContent\";\n\nimport useMarvelService from \"../../services/MarvelService\";\n\nimport './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png';\n\n\n                        // Функциональный компонент hook(i)\nconst RandomChar = () => {\n\n    const [char, setChar] = useState(null);\n    const {getCharacter, clearError, process, setProcess} = useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n        const timerId = setInterval(updateChar, 60000);\n\n        return () => {\n            clearInterval(timerId);\n        }\n        // eslint-disable-next-line\n    }, []);\n\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n\n    const updateChar = () => {\n        clearError();\n        const id = Math.floor(Math.random() * (1011334 - 1011136) + 1011136);\n        getCharacter(id)\n            .then(onCharLoaded)\n\t\t\t.then(() => setProcess('confirmed'))\n\n    }\n\n\n    return (\n        <div className=\"randomchar\">\n\t\t\t{setContent(process, View, char)}\n            <div className=\"randomchar__static\">\n                <p className=\"randomchar__title\">\n                    Random character for today!<br/>\n                    Do you want to get to know him better?\n                </p>\n                <p className=\"randomchar__title\">\n                    Or choose another one\n                </p>\n                <button\n                    className=\"button button__main\"\n                    onClick={updateChar}\n                >\n                    <div className=\"inner\">try it</div>\n                </button>\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\n            </div>\n        </div>\n    )\n}\n\nconst View = ({data}) => {\n    const {name, description, thumbnail, homepage, wiki} = data;\n    let imgStyle = {'objectFit' : 'cover'};\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = {'objectFit' : 'contain'}\n    }\n\n    return (\n        <div className=\"randomchar__block\">\n            <img\n                src={thumbnail}\n                alt=\"Random character\"\n                className=\"randomchar__img\"\n                style={imgStyle}\n            />\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{name}</p>\n                <p className=\"randomchar__descr\">{description}</p>\n                <div className=\"randomchar__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n    )\n}\n\n\n\n\n\n\n\n// class RandomChar extends Component {\n//     state = {\n//         char: {},\n//         loading: true,\n//         error: false\n//     }\n//\n//     marvelService = new MarvelService();\n//\n//     componentDidMount() {\n//         this.updateChar();\n//         // this.timerId = setInterval(this.updateChar, 3000);\n//     }\n//\n//     componentWillUnmount() {\n//         clearInterval(this.timerId);\n//     }\n//\n//     onCharLoaded = (char) => {\n//         this.setState({\n//             char,\n//             loading: false\n//         })\n//     }\n//\n//     onCharLoading = () => {\n//         this.setState({\n//             loading: true\n//         })\n//     }\n//\n//     onError = () => {\n//         this.setState({\n//             loading: false,\n//             error: true\n//         })\n//     }\n//\n//     updateChar = () => {\n//         const id = Math.floor(Math.random() * (1011334 - 1011136) + 1011136);\n//         this.onCharLoading();\n//         this.marvelService\n//             .getCharacter(id)\n//             .then(this.onCharLoaded)\n//             .catch(this.onError);\n//     }\n//\n//     render() {\n//         const {char, loading, error} = this.state;\n//         const errorMessage = error ? <ErrorMessage /> : null;\n//         const spinner = loading ? <Spinner /> : null;\n//         const content = !(loading || error) ? <View char={char} /> : null;\n//\n//         return (\n//             <div className=\"randomchar\">\n//                 {errorMessage}\n//                 {spinner}\n//                 {content}\n//                 <div className=\"randomchar__static\">\n//                     <p className=\"randomchar__title\">\n//                         Random character for today!<br/>\n//                         Do you want to get to know him better?\n//                     </p>\n//                     <p className=\"randomchar__title\">\n//                         Or choose another one\n//                     </p>\n//                     <button\n//                         className=\"button button__main\"\n//                         onClick={this.updateChar}\n//                     >\n//                         <div className=\"inner\">try it</div>\n//                     </button>\n//                     <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\n//                 </div>\n//             </div>\n//         )\n//     }\n// }\n//\n// const View = ({char}) => {\n//     const {name, description, thumbnail, homepage, wiki} = char;\n//     let imgStyle = {'objectFit' : 'cover'};\n//     if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n//         imgStyle = {'objectFit' : 'contain'}\n//     }\n//\n//     return (\n//         <div className=\"randomchar__block\">\n//             <img\n//                 src={thumbnail}\n//                 alt=\"Random character\"\n//                 className=\"randomchar__img\"\n//                 style={imgStyle}\n//             />\n//             <div className=\"randomchar__info\">\n//                 <p className=\"randomchar__name\">{name}</p>\n//                 <p className=\"randomchar__descr\">{description}</p>\n//                 <div className=\"randomchar__btns\">\n//                     <a href={homepage} className=\"button button__main\">\n//                         <div className=\"inner\">homepage</div>\n//                     </a>\n//                     <a href={wiki} className=\"button button__secondary\">\n//                         <div className=\"inner\">Wiki</div>\n//                     </a>\n//                 </div>\n//             </div>\n//         </div>\n//     )\n// }\n\nexport default RandomChar;","import {useState, useEffect, useRef, useMemo} from 'react';\nimport PropTypes from 'prop-types';\n\nimport useMarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\n\nimport './charList.scss';\n\nconst setContent = (process, Component, newItemLoading) => {\n\tswitch (process) {\n\t\tcase 'waiting':\n\t\t\treturn <Spinner/>;\n\t\tcase 'loading':\n\t\t\treturn newItemLoading ? <Component/> : <Spinner/>;\n\t\tcase 'confirmed':\n\t\t\treturn <Component/>;\n\t\tcase 'error':\n\t\t\treturn <ErrorMessage/>;\n\t\tdefault:\n\t\t\tthrow new Error('Unexpected process state');\n\t}\n}\n\nconst CharList = (props) => {\n\n\tconst [charList, setCharList] = useState([]);\n\tconst [newItemLoading, setnewItemLoading] = useState(false);\n\tconst [offset, setOffset] = useState(210);\n\tconst [charEnded, setCharEnded] = useState(false);\n\n\tconst {getAllCharacters, process, setProcess} = useMarvelService();\n\n\tuseEffect(() => {\n\t\tonRequest(offset, true);\n\t\t// eslint-disable-next-line\n\t}, [])\n\n\tconst onRequest = (offset, initial) => {\n\t\tinitial ? setnewItemLoading(false) : setnewItemLoading(true);\n\t\tgetAllCharacters(offset)\n\t\t\t.then(onCharListLoaded)\n\t\t\t.then(() => setProcess('confirmed'));\n\t}\n\n\tconst onCharListLoaded = async(newCharList) => {\n\t\tlet ended = false;\n\t\tif (newCharList.length < 9) {\n\t\t\tended = true;\n\t\t}\n\t\tsetCharList([...charList, ...newCharList]);\n\t\tsetnewItemLoading(false);\n\t\tsetOffset(offset + 9);\n\t\tsetCharEnded(ended);\n\t}\n\n\tconst itemRefs = useRef([]);\n\n\tconst focusOnItem = (id) => {\n\t\titemRefs.current.forEach(item => item.classList.remove('char__item_selected'));\n\t\titemRefs.current[id].classList.add('char__item_selected');\n\t\titemRefs.current[id].focus();\n\t}\n\n\tconst renderItems = arr => {\n\t\tconst items =  arr.map((item, i) => {\n\t\t\tlet imgStyle = {'objectFit' : 'cover'};\n\t\t\tif (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n\t\t\t\timgStyle = {'objectFit' : 'unset'};\n\t\t\t}\n\n\t\t\treturn (\n\t\t\t\t<li\n\t\t\t\t\tclassName=\"char__item\"\n\t\t\t\t\tkey={item.id}\n\t\t\t\t\ttabIndex={0}\n\t\t\t\t\tref={el => itemRefs.current[i] = el}\n\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\tprops.onCharSelected(item.id);\n\t\t\t\t\t\tfocusOnItem(i);\n\t\t\t\t\t}}\n\t\t\t\t\tonKeyDown={(e) => {\n\t\t\t\t\t\tif (e.key === ' ' || e.key === \"Enter\") {\n\t\t\t\t\t\t\tprops.onCharSelected(item.id);\n\t\t\t\t\t\t\tfocusOnItem(i);\n\t\t\t\t\t\t}\n\t\t\t\t\t}}>\n\t\t\t\t\t<img src={item.thumbnail} alt={item.name} style={imgStyle}/>\n\t\t\t\t\t<div className=\"char__name\">{item.name}</div>\n\t\t\t\t</li>\n\t\t\t)\n\t\t});\n\n\t\treturn (\n\t\t\t<ul className=\"char__grid\">\n\t\t\t\t{items}\n\t\t\t</ul>\n\t\t)\n\t}\n\n\tconst elements = useMemo(() => {\n\t\treturn setContent(process, () => renderItems(charList), newItemLoading);\n\t\t// eslint-disable-next-line\n\t}, [process])\n\n\n\treturn (\n\t\t<div className=\"char__list\">\n\t\t\t{elements}\n\t\t\t<button\n\t\t\t\tdisabled={newItemLoading}\n\t\t\t\tstyle={{'display' : charEnded ? 'none' : 'block'}}\n\t\t\t\tclassName=\"button button__main button__long\"\n\t\t\t\tonClick={() => onRequest(offset)}>\n\t\t\t\t<div className=\"inner\">load more</div>\n\t\t\t</button>\n\t\t</div>\n\t)\n}\n\nCharList.propTypes = {\n\tonCharSelected: PropTypes.func.isRequired\n}\n\nexport default CharList;","// import {Component} from \"react\";\nimport {useState, useEffect} from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport useMarvelService from \"../../services/MarvelService\";\nimport setContent from \"../../utils/setContent\";\n\nimport './charInfo.scss';\n\n\n                            // Функциональный компонент hook(i)\nconst CharInfo = (props) => {\n\n    const [char, setChar] = useState(null);\n\n\n    const {getCharacter, clearError, process, setProcess} = useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n        // eslint-disable-next-line\n    }, [props.charId]);\n\n\n    const updateChar = () => {\n        const {charId} = props;\n        if (!charId) {\n            return;\n        }\n\n        clearError();\n        getCharacter(charId)\n            .then(onCharLoaded)\n\t\t\t.then(() => setProcess('confirmed'))\n    }\n\n\n    const onCharLoaded = (char) => {\n        setChar(char)\n    }\n\n\n\t// Удаление данной конструкции\n    // const skeleton = char || loading || error ? null : <Skeleton />;\n    // const errorMessage = error ? <ErrorMessage /> : null;\n    // const spinner = loading ? <Spinner /> : null;\n    // const content = !(loading || error || !char) ? <View char={char} /> : null;\n\n    return (\n        <div className=\"char__info\">\n\t\t\t{setContent(process, View, char)}\n        </div>\n    )\n}\n\nconst View = ({data}) => {\n    const {name, description, thumbnail, homepage, wiki, comics} = data;\n\n    let imgStyle = {'objectFit' : 'cover'};\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = {'objectFit' : 'contain'}\n    }\n\n    return (\n        <>\n            <div className=\"char__basics\">\n                <img\n                    src={thumbnail}\n                    alt={name}\n                    style={imgStyle}\n                />\n                <div>\n                    <div className=\"char__info-name\">{name}</div>\n                    <div className=\"char__btns\">\n                        <a href={homepage} className=\"button button__main\">\n                            <div className=\"inner\">homepage</div>\n                        </a>\n                        <a href={wiki} className=\"button button__secondary\">\n                            <div className=\"inner\">Wiki</div>\n                        </a>\n                    </div>\n                </div>\n            </div>\n            <div className=\"char__descr\">\n                {description}\n            </div>\n            <div className=\"char__comics\">Comics:</div>\n            <ul className=\"char__comics-list\">\n                {comics.length > 0 ? null : 'There is no comics with this character'}\n                {\n                    comics.map((item, i) => {\n                        // eslint-disable-next-line\n                        if (i > 9) return;\n                        return (\n                            <li key={i} className=\"char__comics-item\">\n                                {item.name}\n                            </li>\n                        )\n                    })\n                }\n            </ul>\n        </>\n    )\n}\n\nCharInfo.propTypes = {\n  charId: PropTypes.number\n}\n\n\n\n// class CharInfo extends Component {\n//\n//     state = {\n//         char: null,\n//         loading: false,\n//         error: false\n//     }\n//\n//     marvelService = new MarvelService();\n//\n//     componentDidMount() {\n//         this.updateChar();\n//     }\n//\n//     componentDidUpdate(prevProps) {\n//         if (this.props.charId !== prevProps.charId) {\n//             this.updateChar();\n//         }\n//     }\n//\n//\n//     updateChar = () => {\n//         const {charId} = this.props;\n//         if (!charId) {\n//             return;\n//         }\n//\n//         this.onCharLoading();\n//\n//         this.marvelService\n//             .getCharacter(charId)\n//             .then(this.onCharLoaded)\n//             .catch(this.onError)\n//     }\n//\n//\n//\n//     onCharLoaded = (char) => {\n//         this.setState({\n//             char,\n//             loading: false\n//         })\n//     }\n//\n//     onCharLoading = () => {\n//         this.setState({\n//             loading: true\n//         })\n//     }\n//\n//     onError = () => {\n//         this.setState({\n//             loading: false,\n//             error: true\n//         })\n//     }\n//\n//\n//     render() {\n//         const {char, loading, error} = this.state;\n//\n//         const skeleton = char || loading || error ? null : <Skeleton />;\n//         const errorMessage = error ? <ErrorMessage /> : null;\n//         const spinner = loading ? <Spinner /> : null;\n//         const content = !(loading || error || !char) ? <View char={char} /> : null;\n//\n//         return (\n//             <div className=\"char__info\">\n//                 {skeleton}\n//                 {errorMessage}\n//                 {spinner}\n//                 {content}\n//             </div>\n//         )\n//     }\n// }\n//\n// const View = ({char}) => {\n//     const {name, description, thumbnail, homepage, wiki, comics} = char;\n//\n//     let imgStyle = {'objectFit' : 'cover'};\n//     if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n//         imgStyle = {'objectFit' : 'contain'}\n//     }\n//\n//     return (\n//         <>\n//             <div className=\"char__basics\">\n//                 <img\n//                     src={thumbnail}\n//                     alt={name}\n//                     style={imgStyle}\n//                 />\n//                 <div>\n//                     <div className=\"char__info-name\">{name}</div>\n//                     <div className=\"char__btns\">\n//                         <a href={homepage} className=\"button button__main\">\n//                             <div className=\"inner\">homepage</div>\n//                         </a>\n//                         <a href={wiki} className=\"button button__secondary\">\n//                             <div className=\"inner\">Wiki</div>\n//                         </a>\n//                     </div>\n//                 </div>\n//             </div>\n//             <div className=\"char__descr\">\n//                 {description}\n//             </div>\n//             <div className=\"char__comics\">Comics:</div>\n//             <ul className=\"char__comics-list\">\n//                 {comics.length > 0 ? null : 'There is no comics with this character'}\n//                 {\n//                     comics.map((item, i) => {\n//                         // eslint-disable-next-line\n//                         if (i > 9) return;\n//                         return (\n//                             <li key={i} className=\"char__comics-item\">\n//                                 {item.name}\n//                             </li>\n//                         )\n//                     })\n//                 }\n//             </ul>\n//         </>\n//     )\n// }\n\nexport default CharInfo;","import { useState } from \"react\";\r\nimport { Formik, Form, Field, ErrorMessage as FormikErrorMessage } from \"formik\";\r\nimport * as Yup from 'yup'\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport useMarvelService from \"../../services/MarvelService\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nimport './charSearchForm.scss';\r\n\r\nconst CharSearchForm = () => {\r\n\tconst [char, setChar] = useState(null);\r\n\tconst {getCharacterByName, clearError, process, setProcess} = useMarvelService();\r\n\r\n\tconst onCharLoaded = (char) => {\r\n\t\tsetChar(char);\r\n\t}\r\n\r\n\tconst updateChar = (name) => {\r\n\t\tclearError();\r\n\r\n\t\tgetCharacterByName(name)\r\n\t\t\t.then(onCharLoaded)\r\n\t\t\t.then(() => setProcess('confirmed'));\r\n\t}\r\n\r\n\tconst errorMessage = process === 'error' ? <div className=\"char__search-critical-error\"><ErrorMessage /></div> : null;\r\n\tconst results = !char ? null : char.length > 0 ?\r\n\t\t<div className=\"char__search-wrapper\">\r\n\t\t\t<div className=\"char__search-success\">There is! Visit {char[0].name} page?</div>\r\n\t\t\t<Link to={`/characters/${char[0].id}`} className=\"button button__secondary\">\r\n\t\t\t\t<div className=\"inner\">To page</div>\r\n\t\t\t</Link>\r\n\t\t</div> :\r\n\t\t<div className=\"char__search-error\">\r\n\t\t\tThe character was not found. Check the name and try again\r\n\t\t</div>;\r\n\r\n\treturn (\r\n\t\t<div className=\"char__search-form\">\r\n\t\t\t<Formik\r\n\t\t\t\tinitialValues={{\r\n\t\t\t\t\tcharName: ''\r\n\t\t\t\t}}\r\n\t\t\t\tvalidationSchema={Yup.object({\r\n\t\t\t\t\tcharName: Yup.string().required('This field is required')\r\n\t\t\t\t})}\r\n\t\t\t\tonSubmit={ ({charName}) => {\r\n\t\t\t\t\tupdateChar(charName);\r\n\t\t\t\t}}\r\n\t\t\t>\r\n\t\t\t\t<Form>\r\n\t\t\t\t\t<label className=\"char__search-label\" htmlFor=\"charName\">Or find a character by name</label>\r\n\t\t\t\t\t<div className=\"char__search-wrapper\">\r\n\t\t\t\t\t\t<Field\r\n\t\t\t\t\t\t\tid=\"charName\"\r\n\t\t\t\t\t\t\tname=\"charName\"\r\n\t\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\t\tplaceholder=\"Enter name\"\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t<button\r\n\t\t\t\t\t\t\ttype=\"submit\"\r\n\t\t\t\t\t\t\tclassName=\"button button__main\"\r\n\t\t\t\t\t\t\tdisabled={process === 'loading'}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t<div className=\"inner\">find</div>\r\n\t\t\t\t\t\t</button>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<FormikErrorMessage className=\"char__search-error\" name=\"charName\" component=\"div\" />\r\n\t\t\t\t</Form>\r\n\t\t\t</Formik>\r\n\t\t\t{results}\r\n\t\t\t{errorMessage}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default CharSearchForm;","import {Component} from \"react\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nclass ErrorBoundary extends Component {\r\n\tstate = {\r\n\t\terror: false\r\n\t}\r\n\r\n\r\n\tcomponentDidCatch(error, errorInfo) {\r\n\t\tconsole.log(error, errorInfo);\r\n\t\tthis.setState({\r\n\t\t\terror: true\r\n\t\t})\r\n\t}\r\n\r\n\trender() {\r\n\t\tif (this.state.error) {\r\n\t\t\t// return <h2 style={{margin: '50% auto 0 auto', fontSize: '40px', color: 'red'}}>Something went wrong</h2>\r\n\t\t\treturn <ErrorMessage />\r\n\t\t}\r\n\r\n\t\treturn this.props.children;\r\n\t}\r\n}\r\n\r\nexport default ErrorBoundary;","import {useState} from \"react\";\r\nimport { Helmet } from \"react-helmet\";\r\n\r\nimport RandomChar from '../randomChar/RandomChar';\r\nimport CharList from '../charList/CharList';\r\nimport CharInfo from '../charInfo/CharInfo';\r\nimport CharSearchForm from \"../charSearchForm/CharSearchForm\";\r\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\r\n\r\n\r\nimport decoration from '../../resources/img/vision.png';\r\n\r\nconst MainPage = () => {\r\n\r\n\tconst [selectedChar, setChar] =  useState(null);\r\n\r\n\r\n\tconst onCharSelected = (id) => {\r\n\t\tsetChar(id);\r\n\t}\r\n\r\n\t// console.log('mp');\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<Helmet>\r\n\t\t\t\t<meta\r\n\t\t\t\t\tname=\"description\"\r\n\t\t\t\t\tcontent=\"Web site created using create-react-app\"\r\n\t\t\t\t/>\r\n\t\t\t\t<title>Marvel React App</title>\r\n\t\t\t</Helmet>\r\n\t\t\t<ErrorBoundary>\r\n\t\t\t\t<RandomChar/>\r\n\t\t\t</ErrorBoundary>\r\n\t\t\t<div className=\"char__content\">\r\n\t\t\t<ErrorBoundary>\r\n\t\t\t\t\t<CharList onCharSelected={onCharSelected} />\r\n\t\t\t\t</ErrorBoundary>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<ErrorBoundary>\r\n\t\t\t\t\t\t<CharInfo charId={selectedChar} />\r\n\t\t\t\t\t</ErrorBoundary>\r\n\t\t\t\t\t<ErrorBoundary>\r\n\t\t\t\t\t\t<CharSearchForm />\r\n\t\t\t\t\t</ErrorBoundary>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t<img className=\"bg-decoration\" src={decoration} alt=\"vision\"/>\r\n\t\t</>\r\n\t)\r\n}\r\n\r\nexport default MainPage;","import  {useState, useCallback} from \"react\";\r\n\r\nexport const useHttp = () => {\r\n\tconst [process, setProcess] = useState('waiting');\r\n\r\n\tconst request = useCallback(async (url, method = \"GET\", body = null, headers = {'Content-Type': 'application/json'}) => {\r\n\r\n\t\tsetProcess('loading');\r\n\r\n\t\ttry {\r\n\t\t\tconst response = await fetch(url, {method, body, headers});\r\n\r\n\t\t\tif (!response.ok) {\r\n\t\t\t\tthrow new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n\t\t\t}\r\n\r\n\t\t\tconst data = await response.json();\r\n\r\n\t\t\treturn data;\r\n\r\n\t\t} catch (e) {\r\n\t\t\tsetProcess('error');\r\n\t\t\tthrow e;\r\n\t\t}\r\n\t}, [])\r\n\r\n\tconst clearError = useCallback(() => {\r\n\t\tsetProcess('loading');\r\n\t}, []);\r\n\r\n\treturn {request, clearError, process, setProcess};\r\n}","import {useHttp} from \"../hooks/http.hook\";\r\n\r\nconst useMarvelService = () => {\r\n\tconst {request, clearError, process, setProcess} = useHttp();\r\n\r\n\tconst _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n\tconst _apiKey = 'apikey=81c9ec44faf041042c369770623c2248';\r\n\tconst _baseOffset = 210;\r\n\r\n\r\n\tconst getAllCharacters = async (offset = _baseOffset) => {\r\n\t\tconst res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n\t\treturn res.data.results.map(_transformCharacter);\r\n\t}\r\n\r\n\t// Отдельный метод для поиска по имени\r\n\tconst getCharacterByName = async (name) => {\r\n\t\tconst res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n\t\treturn res.data.results.map(_transformCharacter);\r\n\t}\r\n\r\n\tconst getCharacter = async (id) => {\r\n\t\tconst res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n\t\treturn _transformCharacter(res.data.results[0]);\r\n\t}\r\n\r\n\tconst getAllComics = async (offset = 0) => {\r\n\t\tconst res = await request(\r\n\t\t\t`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`\r\n\t\t)\r\n\r\n\t\treturn res.data.results.map(_transformComics);\r\n\t}\r\n\r\n\tconst getComic = async (id) => {\r\n\t\tconst res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n\t\treturn _transformComics(res.data.results[0]);\r\n\t}\r\n\r\n\tconst _transformCharacter = (char) => {\r\n\t\treturn {\r\n\t\t\tid: char.id,\r\n\t\t\tname: char.name,\r\n\t\t\tdescription: char.description\r\n\t\t\t\t? `${char.description.slice(0, 210)}...`\r\n\t\t\t\t: 'There is no description for this character',\r\n\t\t\tthumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n\t\t\thomepage: char.urls[0].url,\r\n\t\t\twiki: char.urls[1].url,\r\n\t\t\tcomics: char.comics.items\r\n\t\t}\r\n\t}\r\n\r\n\tconst _transformComics = (comics) => {\r\n\t\treturn {\r\n\t\t\tid: comics.id,\r\n\t\t\ttitle: comics.title,\r\n\t\t\tdescription: comics.description || \"There is no description\",\r\n\t\t\tpageCount: comics.pageCount\r\n\t\t\t\t? `${comics.pageCount} p.`\r\n\t\t\t\t: \"No information about the number of pages\",\r\n\t\t\tthumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\r\n\t\t\tlanguage: comics.textObjects[0]?.language || \"en-us\",\r\n\t\t\tprice: comics.prices[0].price\r\n\t\t\t\t? `${comics.prices[0].price}$`\r\n\t\t\t\t: \"not available\",\r\n\t\t}\r\n\t}\r\n\r\n\treturn {\r\n\t\tclearError,\r\n\t\tprocess,\r\n\t\tsetProcess,\r\n\t\tgetAllCharacters,\r\n\t\tgetCharacterByName,\r\n\t\tgetCharacter,\r\n\t\tgetAllComics,\r\n\t\tgetComic\r\n\t};\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\t\t\t// Неизмененный классовый компонент\r\n// class MarvelService {\r\n// \t_apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n// \t_apiKey = 'apikey=81c9ec44faf041042c369770623c2248';\r\n// \t_baseOffset = 210;\r\n//\r\n// \tgetResource = async (url) => {\r\n// \t\tlet res = await fetch(url);\r\n//\r\n// \t\tif (!res.ok) {\r\n// \t\t\tthrow new Error(`Could not fetch ${url}, status: ${res.status}`);\r\n// \t\t}\r\n//\r\n// \t\treturn await res.json();\r\n// \t}\r\n//\r\n// \tgetAllCharacters = async (offset = this._baseOffset) => {\r\n// \t\tconst res = await this.getResource(`${this._apiBase}characters?limit=9&offset=${offset}&${this._apiKey}`);\r\n// \t\treturn res.data.results.map(this._transformCharacter);\r\n// \t}\r\n//\r\n// \tgetCharacter = async (id) => {\r\n// \t\tconst res = await this.getResource(`${this._apiBase}characters/${id}?${this._apiKey}`);\r\n// \t\treturn this._transformCharacter(res.data.results[0]);\r\n// \t}\r\n//\r\n// \t_transformCharacter = (char) => {\r\n// \t\treturn {\r\n// \t\t\tid: char.id,\r\n// \t\t\tname: char.name,\r\n// \t\t\tdescription: char.description ? `${char.description.slice(0, 210)}...` : 'There is no description for this character',\r\n// \t\t\tthumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n// \t\t\thomepage: char.urls[0].url,\r\n// \t\t\twiki: char.urls[1].url,\r\n// \t\t\tcomics: char.comics.items\r\n// \t\t}\r\n// \t}\r\n// }\r\n\r\nexport default useMarvelService;","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import Spinner from \"../components/spinner/Spinner\";\r\nimport ErrorMessage from \"../components/errorMessage/ErrorMessage\";\r\nimport Skeleton from \"../components/skeleton/Skeleton\";\r\n\r\nconst setContent = (process, Component, data) => {\r\n\tswitch (process) {\r\n\t\tcase 'waiting':\r\n\t\t\treturn <Skeleton />;\r\n\t\tcase 'loading':\r\n\t\t\treturn <Spinner />;\r\n\t\tcase 'confirmed':\r\n\t\t\treturn <Component data={data} />;\r\n\t\tcase 'error':\r\n\t\t\treturn <ErrorMessage />;\r\n\r\n\t\tdefault:\r\n\t\t\tthrow new Error('Unexpected process state');\r\n\t}\r\n}\r\n\r\nexport default setContent;"],"names":["ErrorMessage","_jsx","style","display","width","height","objectFit","margin","src","img","alt","View","_ref","data","name","description","thumbnail","homepage","wiki","imgStyle","_jsxs","className","children","href","RandomChar","char","setChar","useState","getCharacter","clearError","process","setProcess","useMarvelService","useEffect","updateChar","timerId","setInterval","clearInterval","onCharLoaded","id","Math","floor","random","then","setContent","onClick","mjolnir","props","charList","setCharList","newItemLoading","setnewItemLoading","offset","setOffset","charEnded","setCharEnded","getAllCharacters","onRequest","initial","onCharListLoaded","async","ended","newCharList","length","itemRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","elements","useMemo","Component","Spinner","Error","arr","items","map","i","tabIndex","ref","el","onCharSelected","onKeyDown","e","key","renderItems","disabled","comics","_Fragment","charId","CharSearchForm","getCharacterByName","errorMessage","results","Link","to","concat","Formik","initialValues","charName","validationSchema","Yup","required","onSubmit","Form","htmlFor","Field","type","placeholder","FormikErrorMessage","component","ErrorBoundary","constructor","arguments","state","error","componentDidCatch","errorInfo","console","log","this","setState","render","MainPage","selectedChar","Helmet","content","CharList","CharInfo","decoration","request","useHttp","useCallback","url","method","undefined","body","headers","response","fetch","ok","status","json","_apiBase","_apiKey","_transformCharacter","slice","path","extension","urls","_transformComics","_comics$textObjects$","title","pageCount","language","textObjects","price","prices","res","getAllComics","getComic","Skeleton"],"sourceRoot":""}